namespace Cobra.Lang

	# TODO: should .toList return a List<of dynamic> or an ArrayList?
	# extend System.Collections.IEnumerable
	#	def toList as List<of dynamic>
	#	def toList as ArrayList

	extend IEnumerable<of T>

		def toList as List<of T>
			return List<of T>(this)
/#
	TODO: cannot do the following yet due to a bug in extensions and how they are chosen with respect to inheritance

		def last as T
			for item in this, pass
			return item

		def numbered as KeyValuePair<of int, T>*
			"""
			Returns a stream of pairs of (index, value).
			Can be used like so:
				for i, value in someStream.numbered
					...
			"""
			i = 0
			for item in this
				yield KeyValuePair<of int, T>(i, item)

		def reversed as List<of T>
			return .toList.reversed

		def sorted as List<of T>
			return .toList.sorted

		def sorted(comparison as Comparison<of T>) as List<of T>
			# TODO: needs a test case
			return .toList.sorted(comparison)

		def sorted(comparer as Comparer<of T>) as List<of T>
			# TODO: needs a test case
			return .toList.sorted(comparer)
#/


	class TestIEnumerableExtensions

		shared
		
			def stuff as int*
				""" Returns 2, 1, 3 in that order. """
				yield 2
				yield 1
				yield 3
	
			def empty as int*
				yield break

		test
		
			t = .stuff.toList
			assert t.count == 3 and t == [2, 1, 3]
			
/#
			assert .stuff.last == 3
			
			# TODO: test .numbered
			
			t = .stuff.reversed
			assert t.count == 3 and t == [3, 1, 2]
			
			t = .stuff.sorted
			assert t.count == 3 and t == [1, 2, 3]
#/

			t = .empty.toList
			assert t.count == 0 and t == []

/#
			# TODO: test .numbered
			
			assert .empty.reversed == []
			assert .empty.sorted == []
#/
