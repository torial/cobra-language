"""
Pair.cobra

Provides two Pair classes:

	-- one type arg - both elements of the pair are the same type

		Pair<of int>(2, 2)
		Pair<of String>('foo', 'bar')

	-- two type args - elements can be different types

		Pair<of int, String>(3, 'three')
		Pair<of Customer, decimal>(c, amount)

The elements of the pair are accessed as .a and .b or [0] and [1]. You can also use a `for` loop on
a pair as it is enumerable. Comparisons between pairs such as `p1 < p2` are effectively comparisons
of their elements.

You can use a pair's hash code as long don't modify the pair or its elements. That means you can put
pairs in sets or use them as keys in dictionaries.

Unit tests below show examples of using pairs.
"""

namespace Cobra.Lang


	class BasePair is abstract

		def _compare(a, b) as int
			"""
			Gracefully handle comparisons that involve nil.
			A simple `a.compareTo(b)` does not work if `a` can be `nil`.
			"""
			if a is nil
				if b is nil, return 0
				else, return -1
			else if b is nil
				return 1
			else
				return a.compareTo(b)


	class Pair<of T> inherits BasePair
		implements IEnumerable<of T>, IComparable<of Pair<of T>>

		test
			p = Pair<of int>(1, 2)
			assert p.a == 1 and p.b == 2
			assert p[0] == 1 and p[1] == 2
			assert p.toString == 'Pair(1, 2)'
			expect IndexOutOfRangeException, assert p[2] == 3

		cue init(a, b)
			base.init
			_a, _b = a, b
	
		get a from var as T
	
		get b from var as T

		get [i as int] as T
			if i == 0, return _a
			if i == 1, return _b
			throw IndexOutOfRangeException('Index [i] is out of range for a pair (0-1).')
		
		def toString as String is override
			sa = CobraCore.toTechString(.a)
			sb = CobraCore.toTechString(.b)
			return '[.typeOf.name]([sa], [sb])'

		def equals(other as Pair<of T>) as bool
			test
				assert Pair<of String>('a', 'b').equals(Pair<of String>('a', 'b'))
				assert Pair<of String>('a', 'b').equals(Pair<of String>('a', 'c'))
			body
				return other.a == .a and other.b == .b

		def equals(obj as Object?) as bool is override
			test
				assert Pair<of String>('a', 'b') == Pair<of String>('a', 'b')
				assert Pair<of String>('a', 'b') <> Pair<of String>('a', 'c')
			body
				if obj is nil, return false
				if obj is this, return true
				if obj inherits Pair<of T>, return obj.a == .a and obj.b == .b
				return false

		def compareTo(p as Pair<of T>) as int
			test
				assert Pair<of String>('a', 'b') < Pair<of String>('b', 'c')
				assert Pair<of int>(2, 3) > Pair<of int>(2, 2)
				assert Pair<of String?>(nil, 'a') < Pair<of String?>(nil, 'b')
				assert Pair<of int?>(nil, nil) < Pair<of int?>(1, 1)
			body
				diff = _compare(.a, p.a)
				if diff == 0, diff = _compare(.b, p.b)
				return diff

		def getHashCode as int is override
			test
				d = {
					Pair<of int>(1, 1): 'one',
					Pair<of int>(2, 2): 'two',
					Pair<of dynamic>(nil, nil): 'nil',
				}
				assert d[Pair<of int>(1, 1)] == 'one'
				assert d[Pair<of int>(2, 2)] == 'two'
				assert d[Pair<of dynamic>(nil, nil)] == 'nil'
			body
				return HashCodeUtils.combine(
							if(.a is nil, 0, .a.getHashCode),
							if(.b is nil, 0, .b.getHashCode))

		def getEnumerator as IEnumerator<of T>
			test
				assert (for s in Pair<of String>('a', 'b') get s) == ['a', 'b']
			body
				yield .a
				yield .b

		def getEnumerator as System.Collections.IEnumerator
			implements System.Collections.IEnumerable
			return .getEnumerator


	class Pair<of TA, TB> inherits BasePair
		implements System.Collections.IEnumerable, IComparable<of Pair<of TA, TB>>
	
		test
			p = Pair<of int, int>(1, 2)
			assert p.a == 1 and p.b == 2
			assert p[0] == 1 and p[1] == 2
			assert p.toString == 'Pair(1, 2)'
			expect IndexOutOfRangeException, assert p[2] == 3

		cue init(a, b)
			base.init
			_a, _b = a, b
	
		get a from var as TA
	
		get b from var as TB

		get [i as int] as dynamic?
			if i == 0, return _a
			if i == 1, return _b
			throw IndexOutOfRangeException('Index [i] is out of range for a pair (0-1).')
		
		def toString as String is override
			sa = CobraCore.toTechString(.a)
			sb = CobraCore.toTechString(.b)
			return '[.typeOf.name]([sa], [sb])'

		def equals(other as Pair<of TA, TB>) as bool
			test
				assert Pair<of String>('a', 'b').equals(Pair<of String>('a', 'b'))
				assert Pair<of String>('a', 'b').equals(Pair<of String>('a', 'c'))
			body
				return other.a == .a and other.b == .b

		def equals(obj as Object?) as bool is override
			test
				assert Pair<of String, String>('a', 'b') == Pair<of String, String>('a', 'b')
				assert Pair<of String, String>('a', 'b') <> Pair<of String, String>('a', 'c')
			body
				if obj is nil, return false
				if obj is this, return true
				if obj inherits Pair<of TA, TB>, return obj.a == .a and obj.b == .b
				return false

		def compareTo(p as Pair<of TA, TB>) as int
			test
				assert Pair<of String, int>('a', 3) < Pair<of String, int>('b', 4)
				assert Pair<of int, int>(2, 3) > Pair<of int, int>(2, 2)
				assert Pair<of String?, String?>(nil, 'a') < Pair<of String?, String?>(nil, 'b')
				assert Pair<of int?, int?>(nil, nil) < Pair<of int?, int?>(1, 1)
			body
				diff = _compare(.a, p.a)
				if diff == 0, diff = _compare(.b, p.b)
				return diff

		def getHashCode as int is override
			test
				d = {
					Pair<of int, String>(1, 'one'): 'one',
					Pair<of int, int>(2, 2): 'two',
					Pair<of dynamic, dynamic>(nil, nil): 'nil',
				}
				assert d[Pair<of int, String>(1, 'one')] == 'one'
				assert d[Pair<of int, int>(2, 2)] == 'two'
				assert d[Pair<of dynamic, dynamic>(nil, nil)] == 'nil'
			body
				return HashCodeUtils.combine(
							if(.a is nil, 0, .a.getHashCode),
							if(.b is nil, 0, .b.getHashCode))

		def getEnumerator as System.Collections.IEnumerator
			test
				assert (for s in Pair<of String, String>('a', 'b') get s) == ['a', 'b']
			body
				yield .a
				yield .b

