use System.Reflection
use System.Text.RegularExpressions


namespace Cobra.Lang

	class CobraCore

		shared
		
			## Release info

			get versionDescription as String
				"""
				Returns a textual description of the version such as "X.Y.Z" or "svn-post-X.Y.Z".
				"""
				return 'svn-post-[.version]'
				# return .version.toString
			
			get isOfficialRelease
				return false

			get version as Version
				return Version(0, 8, 0)

			get releaseNum as int
				return 25


			## String Makers
			
			pro printStringMaker as StringMaker
				"""
				Used by `print` statements, string substitutions and .toPrintString methods.
				"""
				get
					return CobraImp._printStringMaker
				set
					CobraImp._printStringMaker = value
			
			pro techStringMaker as StringMaker
				"""
				Used by `assert` failures, `trace` statements and .toTechString methods.
				"""
				get
					return CobraImp._techStringMaker
				set
					CobraImp._techStringMaker = value


			## Program stuff

			get commandLineArgs as List<of String>
				return List<of String>(Environment.getCommandLineArgs)

			get exePath as String
				"""
				Returns the full path of the currently executing exe including directory, file name and extension.
				Use `Path.getDirectoryName()` on this to get the directory containing the current exe.
				"""
				test
					assert '.exe' in CobraCore.exePath
				body
					return Assembly.getEntryAssembly.location

			def exit(exitCode as int)
				""" Exits the process. """
				Environment.exit(exitCode)
			
			get newLine as String
				""" Returns the newline for the current environment/platform. """
				return Environment.newLine

			get printDestination as TextWriter
				"""
				Returns the TextWriter that print statements currently print to.
				This can change via the block version of the `print to` statement.
				"""
				return CobraImp.printDestination

			def printDebuggingTips
				print 'An unhandled exception has occurred.'
				print
				print 'Cobra debugging tips:'
				print '    To get file name and line number information for the stack frames, use:'
				print '        cobra -debug foo.cobra'
				if CobraCore.isRunningOnMono
					print '    If running the executable through "mono" then also use --debug (double dash):'
					print '        mono --debug foo.exe ...'
				print '    To get a post-mortem, HTML-formatted report with more details about your objects:'
				print '        cobra -debug -exception-report foo.cobra'
				print '    For even more information, try:'
				print '        cobra -debug -exception-report -detailed-stack-trace foo.cobra'
				print '    Or use the abbreviations:'
				print '        cobra -d -er -dst foo.cobra'
				# TODO: print '    See also: http://cobra-language.com/docs/debugging'
				print
			

			## Reset
			
			def reset(printDestination as TextWriter)
				"""
				Resets the Cobra run-time support using the argument as the initial print destination on the "print to" stack.
				This is occasionally needed in special circumstances such as running with Pex (http://research.microsoft.com/pex/).
				"""
				CobraImp.reset(printDestination)

			def reset
				"""
				Resets the Cobra run-time support using Console.out.
				"""
				.reset(Console.out)
			

			## Tracer

			var _tracer as Tracer?

			pro tracer as Tracer
				"""
				The global Tracer object used by `trace` statements.
				Via this property, you can set this to your own instance,
				or access the tracer to read or write its properties.
				To turn off tracing, for example, you can write `CobraCore.tracer.isActive = false`.
				"""
				get
					if _tracer is nil
						_tracer = Tracer()
					return _tracer to !
				set
					_tracer = Tracer()


			## Run Tests

			def runAllTests
				"""
				Run all Cobra `test` sections in all assemblies using reflection to locate them.
				"""
				if CobraImp.showTestProgress, listener = Cobra.Lang.Test.TextWriterListener(Console.out)
				else, listener = Cobra.Lang.Test.TextWriterOnlyOnFailureListener(Console.out)
				tr = Cobra.Lang.Test.TestRunner(listener)
				tr.runAllTests
				if listener.testFailures, CobraCore.exit(1)


			## Detailed stack trace

			pro maxStackFrames as int
				"""
				When detailed stack trace is on, this value limits the maximum stack depth before
				Cobra will exit with a stack overflow error including a listing of the most
				recent stack frames. The default value is 250. You can set to 0 to disable
				stack overflow detection.
				"""
				get
					return CobraImp._maxStackFrames
				set
					require value == 0 or value > 9
					CobraImp._maxStackFrames = value

			pro numLastMaxStackFrames as int
				"""
				When stack overflow is detected, this value gives the number of most recent stack frames that will be printed.
				"""
				get
					return CobraImp._numLastMaxStackFrames
				set
					require value >= 2
					CobraImp._numLastMaxStackFrames = value
					
			var _maxDumpObjectCount = 250
	
			pro maxDumpObjectCount from var
				"""
				Controls the maximum number of objects dumped  in the exception report.
				Defaults to 250 which can easily result in a 5MB exception report.
				"""

			get hasDetailedStackTrace
				return CobraImp.hasDetailedStackTrace

			def handleUnhandledException(ex as Exception)
				print
				try
					print 'Unhandled Exception: [ex]'
				catch exc as Exception
					print 'Unhandled Exception: CAUGHT EXCEPTION FOR [ex.getType.name].toString: [exc]'
				fileName = 'cobra-exception-report.html'
				print 'Writing exception report to [fileName]...'
				using tw = File.createText(fileName)
					HtmlExceptionReportWriter().writeReport(tw, ex)
				print 'Wrote [fileName]'
				didOpen = false
				for envVarName in ['COBRA_OPEN_HTML_ER_COMMAND', 'COBRA_OPEN_HTML_SST_COMMAND']  # SST is old. "super stack trace"
					cmd = Environment.getEnvironmentVariable(envVarName)
					if cmd and cmd.trim.length
						p = System.Diagnostics.Process()
						p.startInfo.fileName = cmd
						p.startInfo.arguments = fileName
						p.startInfo.useShellExecute = false
						p.start
						print '[cmd] [fileName]'
						didOpen = true
						continue
				if not didOpen
					print 'You can set the environment variable COBRA_OPEN_HTML_ER_COMMAND'
					print 'to automatically open the exception report.'

	
			## Type names and tech strings

			def typeName(t as Type) as String
				return CobraImp.typeName(t)

			def toTechString(x as Object?) as String
				return CobraImp.toTechString(x)


			## Will check control flags

			# CC: make a public section/block here
			var _willCheckInvariant = true
				is public
			var _willCheckRequire = true
				is public
			var _willCheckEnsure = true
				is public
			var _willCheckAssert = true
				is public
			var _willCheckNil = true
				is public

			pro willCheckInvariant from var
			pro willCheckRequire from var
			pro willCheckEnsure from var
			pro willCheckAssert from var
			pro willCheckNil from var

			set willCheckAll as bool
				.willCheckInvariant = value
				.willCheckRequire = value
				.willCheckEnsure = value
				.willCheckAssert = value
				.willCheckNil = value


			## Finding cobra command line program

			def runCobraExe(args as String, process as out System.Diagnostics.Process?) as String
				"""
				Runs cobra.exe with the given args, sets the process to the one created for cobra.exe and returns all output including stdio and stderr.
				In addition to examining the output, you should be interested in process.exitCode which will be zero if there was no problems.
				Uses CobraCore.findCobraExe and raises IOException if it cannot be found.
				Uses CobraCore.runAndCaptureAllOutput(p) to run the process.
				"""
				cobraExePath = CobraCore.findCobraExe
				if cobraExePath is nil or cobraExePath == ''
					throw IOException('Cannot locate cobra.exe using CobraCore.findCobraExe. Consider invoking .findCobraExe with additional search paths and passing the result to .runCobraExe.')
				return .runCobraExe(cobraExePath to !, args, out process)

			def runCobraExe(cobraPath as String, args as String, process as out System.Diagnostics.Process?) as String
				require cobraPath.length
				p = System.Diagnostics.Process()
				if cobraPath.toLower.endsWith('.exe') and CobraCore.isRunningOnMono
					p.startInfo.fileName = 'mono'
					p.startInfo.arguments = cobraPath + ' ' + args
				else
					p.startInfo.fileName = cobraPath
					p.startInfo.arguments = args
				# print '[p.startInfo.fileName] [p.startInfo.arguments]'
				process = p
				return CobraCore.runAndCaptureAllOutput(p)

			def findCobraExe as String?
				return .findCobraExe(nil)

			def findCobraExe(extraPaths as IList<of String>?) as String?
				"""
				Finds "cobra" script or "cobra.exe" on the current system by looking in various places:
					* the current directory
					* the directory where the current executable resides
					* the path of the COBRA environment variable
					* the system PATH
					* the path of the cobra.exe that produced the current executable
					* educated guesses like \WINDOWS\Program Files\Cobra\bin and /usr/local/bin
					* the extraPaths argument
				"""
				# check previous cached result first
				if _findCobraCache, return _findCobraCache
				# check the current directory
				path = _findCobraExe(Environment.currentDirectory)
				if path, return path
				# check the directory where the current executable resides
				path = _findCobraExe(Path.getDirectoryName(CobraCore.exePath) to !)
				if path, return path
				# check COBRA environment variable
				path = Environment.getEnvironmentVariable('COBRA') ? ''
				if path <> ''
					path = _findCobraExe(path to !)
					if path, return path
				# check the PATH
				paths = (Environment.getEnvironmentVariable('PATH') ? '').split(Path.pathSeparator)
				for sysPath in paths
					path = _findCobraExe(sysPath)
					if path, return path
				# check for the cobra that created the current executable
				if File.exists(CompileTimeInfo.cobraPath), return CompileTimeInfo.cobraPath
				# check common locations and extraPaths
				morePaths = [
					r'\WINDOWS\Program Files\Cobra\bin',
					r'\Cobra\bin',
					r'/usr/local/bin',
					r'/usr/bin',
					r'/bin',
				]
				if extraPaths, morePaths.addRange(extraPaths)
				for morePath in morePaths
					foundPath = _findCobraExe(morePath)
					if foundPath, return foundPath
				# cannot find cobra.exe
				return nil

			def clearCobraExeCache
				"""
				The `findCobraExe` method caches its results for subsequent speed.
				This method clears the cache in the event you need to do so.
				"""
				_findCobraCache = nil

			var _findCobraCache as String?

			def _findCobraExe(path as String) as String?
				_findCobraCache = _findCobraExe(path, true)
				return _findCobraCache

			def _findCobraExe(path as String, firstTime as bool) as String?
				path = _expandTilde(path)
				if path <> CobraCore.exePath and path.endsWith('cobra.exe')
					# ^ first condition guards against test cases like "invoke-cobra.exe" from endlessly invoking themselves
					if File.exists(path), return path
					else, return nil
				else if Directory.exists(path)
					exts = ['', '.cmd', '.bat', '.exe']
					for ext in exts
						filePath = Path.combine(path, 'cobra' + ext)
						if File.exists(filePath), return filePath
					for ext in exts
						filePath = Path.combine(Path.combine(path, 'bin'), 'cobra' + ext)
						if File.exists(filePath), return filePath
					if firstTime
						# check for a 'Cobra' subdirectory
						return _findCobraExe(Path.combine(path, 'Cobra'), false)
					else
						return nil
				else
					return nil

			def _expandTilde(path as String) as String
				if path.startsWith('~/')
					home = Environment.getFolderPath(Environment.SpecialFolder.Personal)
					path = home + path[1:]
				return path


			## Other util
			
			def hasContracts as bool
				"""
				Returns true if the current process was compiled with -include-contracts:yes (the default).
				This enables you to determine at run-time if contracts are present.
				At least one use for this is:
					if CobraCore.hasContracts
						expect RequireException, .someMethod
					else
						expect SomeOtherException, .someMethod
				"""
				try
					_hasContracts
				catch RequireException
					return true
				return false
			
			def _hasContracts
				require false
				pass

			get runtimePlatform as String
				return 'clr'
				#return 'jvm'
				# return 'objc'

			var _isRunningOnMono as bool?
			
			get isRunningOnMono as bool
				if _isRunningOnMono is nil
					_isRunningOnMono = sharp'System.Type.GetType("Mono.Runtime")' is not nil
				return _isRunningOnMono to !

			get isRunningOnUnix as bool
				"""
				Returns true if the current process is running on Unix/Posix/Linux/BSD/etc.
				"""
				platform = Environment.osVersion.platform to int
				return platform in [4, 6, 128]  # http://www.mono-project.com/FAQ:_Technical

			var _hasMonoVersionString as bool
			var _monoVersionString as String?
				
			def monoVersionString as String?
				"""
				Returns a string such as "2.0" or "1.2.6" or nil if a version number cannot be determined (usually indicating that Mono is not present).
				"""
				if not _hasMonoVersionString
					_hasMonoVersionString = true
					mrt = sharp'System.Type.GetType("Mono.Runtime")' to Type?
					if mrt
						mi = mrt.getMethod('GetDisplayName', BindingFlags(Public, NonPublic, Static))
						if mi
							ret = mi.invoke(nil, nil)
							if ret inherits String
								s = ret.trim
								if s.startsWith('Novell'), s = s.replace('Novell', '').trim
								if s.startsWith('Mono'), s = s.replace('Mono', '').trim
								_monoVersionString = s
				return _monoVersionString

			var _random as Random?
			
			get random as Random
				""" Returns a globally shared, random number generator (created on first request). """
				if _random is nil, _random = Random()
				return _random to !
						
			def runAndCaptureAllOutput(process as System.Diagnostics.Process) as String
				"""
				Example:
					p = System.Diagnostics.Process()
					p.startInfo.fileName = 'some-program'
					p.startInfo.arguments = 'foo bar baz'
					output = CobraCore.runAndCaptureAllOutput(p)
					trace p, p.exitCode, output
				TODO: change to extension method on Process
				"""
				return CobraImp.runAndCaptureAllOutput(process)

			def noOp(args as vari dynamic?) as dynamic?
				"""
				No operation. Primarily used in Cobra's own test suite to consume a local variable to avoid undesired warnings.
				Takes any number of values and returns an undefined value of type `dynamic?` for maximum flexibility.
				"""
				return 0

			var _htmlEncodes = @[['&', '&amp;'], ['<', '&lt;'], ['>', '&gt;'], ['"', '&quot;']]

			def htmlEncode(obj as Object?) as String
				"""
				Return the HTML encoded version of the given object.
				Returns the contents of the object if it is an instance of Html.
				This is useful to display a plain ASCII text string on a web page.
				"""
				if obj is nil, return ''
				if obj inherits Html, return obj.contents
				return .htmlEncode(obj.toString)
			
			def htmlEncode(s as String?) as String
				"""
				Return the HTML encoded version of the given string.
				This is useful to display a plain ASCII text string on a web page.
				"""
				test
					assert .htmlEncode('foo') == 'foo'
					assert .htmlEncode('3 < 5') == '3 &lt; 5'
				body
					if s is nil, return ''
					for code in _htmlEncodes
						s = s.replace(code[0], code[1])
					return s to !

			def htmlDecode(s as String?) as String
				"""
				Return the HTML decoded version of the given string.
				"""
				test
					assert .htmlDecode('foo') == 'foo'
					assert .htmlDecode('3 &lt; 5') == '3 < 5'
				body
					if s is nil, return ''
					for code in _htmlEncodes
						s = s.replace(code[1], code[0])
					return s to !

			def urlEncode(s as String?) as String
				"""
				Return a version of the string encode for and safe to use in URLs.
				"""
				return UrlUtils.encode(s)

			def urlDecode(s as String?) as String
				"""
				Return the decoded version of a URL encoded string.
				"""
				return UrlUtils.decode(s)

			def singleCompare(left, op as String, right) as bool
				test
					cases = [[0, "GT", -0.1, true], [0, "GE", -0.1, true],  [0, "LT", -0.1, false],  [0, "LE", -0.1, false]]
					for left, op, right, answer in cases
						assert .singleCompare(left, op, right) == answer
				body
					branch op
						on 'EQ', return left == right
						on 'NE', return left <> right
						on 'GT', return left > right
						on 'LT', return left < right
						on 'GE', return left >= right
						on 'LE', return left <= right
						on 'IS', return left == right
						on 'ISNOT', return left <> right
						else, throw FallThroughException(op)

			def chainedComparison(stuff as vari dynamic) as bool
				things = List<of dynamic>(stuff)
				for index in 0 : things.count - 1 : 2
					if not .singleCompare(things[index], things[index + 1], things[index + 2])
						return false
				return true
			
			def operatingSystemDescription as String
				"""
				Returns a human readable description of the operating system such as:
					Microsoft Windows NT 6.1.7601 Service Pack 1
					Ubuntu 12.04 LTS
					Mac OS X 10.6.8
				"""
				name = ''
				if File.exists('/System/Library/CoreServices/SystemVersion.plist')
					# Mac
					content = File.readAllText('/System/Library/CoreServices/SystemVersion.plist')
					match = Regex.match(content, r'<string>(Mac[^<]+)')
					if match.success, name += match.groups[1].toString
					match = Regex.match(content, r'<string>(\d+\.[\d\.]+)')
					if match.success, name += ' ' + match.groups[1].toString
				else if File.exists('/etc/lsb-release')
					# Ubuntu, ...
					content = File.readAllText('/etc/lsb-release')
					d = Dictionary<of String, String>()
					for line in content.splitLines
						line = line.trim
						if line == '' or line.startsWith('#') or '=' not in line, continue
						pair = line.split('=', 2)
						d[pair[0].trim] = pair[1].trim
					if d.containsKey('DISTRIB_DESCRIPTION'), name = d['DISTRIB_DESCRIPTION'].trim
					if name == ''
						try
							name = d['DISTRIB_ID'] + ' ' + d['DISTRIB_RELEASE']
						catch
							pass
					if name.startsWith('"') and name.endsWith('"'), name = name[1:-1]
				else if File.exists('/etc/arch-release')
					# Arch Linux
					name = 'Arch Linux ' + _getCommandOutput('/bin/uname', '-r').trim
					pacman = _getCommandOutput('pacman', '--version')
					match = Regex.match(pacman, r'[Pp]acman v?(\d+\.[\d\.]+)')
					if match.success, name += ' (pacman ' + match.groups[1].toString.trim + ')'
				else if File.exists('/etc/system-release')
					# CentOS, Fedora, ...
					name = File.readAllText('/etc/system-release')
				else if File.exists('/etc/redhat-release')
					# RedHat, ...
					name = File.readAllText('/etc/redhat-release')
				if name == ''
					# everyone else
					name = Environment.osVersion.toString
				name = name.trim
				return name

			def _getCommandOutput(command as String, args as String) as String
				p = System.Diagnostics.Process()
				p.startInfo.fileName = command
				p.startInfo.arguments = args
				p.startInfo.useShellExecute = false
				try
					return CobraCore.runAndCaptureAllOutput(p).trim
				catch
					# specific to users of this method: return '' rather than error
					return ''

