##
## Compiler
##

class Compiler is partial

	def writeJava
		Node.setCompiler(this)
		try
			pass
			_moduleFileName_to_sharpToCurlyLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for _curModule in _modules
				if not _curModule.fileName.endsWith('SystemInterfaces.cobra')
					sharpToCobraLineNum = _curModule.writeJavaDef
					_moduleFileName_to_sharpToCurlyLineNum[_curModule.fileName] = sharpToCobraLineNum
					_moduleFileName_to_sharpToCurlyLineNum[Path.getFullPath(_curModule.fileName)] = sharpToCobraLineNum
		finally
			Node.setCompiler(nil)

	def writeJavaTestInvocation
		pass

	def compileJava
		.compileJava('')

	def compileJava(extraJavacOptions as String)
		require
			.modules.count
		body
			print 'Not compiling Java yet...'


##
## Node
##

class Node is partial

	def writeJavaDef(sw as CurlyWriter)
		require .didBindInt or .didBindImp
		pass


class SyntaxNode is partial

	def writeJavaDef(sw as CurlyWriter)
		base.writeJavaDef(sw)
		sw.node(this)


interface INamedNode is partial

	get javaName as String
		"""
		Return the name that should be used in C# source code.
		"""


class NamedNode is partial

	get javaName as String
		return _name

	get javaRef as String
		return .javaName


##
## Module
##

class Module is partial

	var _javaFileName = ''

	get javaFileName from var

	get javaSource as String
		if _javaFileName.length
			return File.readAllText(_javaFileName)
		else
			throw FallThroughException('csFileName is blank')

	def writeJavaDef as Dictionary<of int, int>? is abstract

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass


class SharpModule is partial

	def writeJavaDef as Dictionary<of int, int>? is override
		assert false
		return nil


class JavaModule inherits NativeModule is partial
	"""
	The purpose of a Java module is to allow the programmer to include .java source for Cobra to
	incorporate in the final compilation.
	"""

	cue init(fileName as String, verbosity as int)
		base.init(fileName, verbosity, '')
		_javaFileName = fileName

	def writeJavaDef as Dictionary<of int, int>? is override
		if false
			# kind of silly, but it works:
			d = Dictionary<of int, int>()
			for i in 1 : Utils.countChars(File.readAllText(_javaFileName), c'\n')+1
				d[i] = i
			return d	
		return nil


class AssemblyModule is partial

	get javaSource as String is override
		return '(no Java source for [this])'

	def writeJavaDef as Dictionary<of int, int>? is override
		return nil


class CobraModule is partial

	get javaFileName as String is override
		if _javaFileName == '' and not _fileName.endsWith('SystemInterfaces.cobra')
			_javaFileName = _fileName + '.java'
		return _javaFileName

	def writeJavaDef as Dictionary<of int, int>? is override
		file = File.createText(.javaFileName)
		using sw = CurlyWriter(file, CurlyLineNumberTreatment.PoundLine)
			.compiler.addIntermediateFile(_javaFileName)
			sw.start(.fileName)
			sw.write('// [_javaFileName]\n')
			sw.write('// Generated by Cobra\n')  # TODO: put version number here
			sw.write('// on [DateTime.now]\n')
			# TODO: list op sys
			sw.write('\n')

			# TODO DELME sw.write('using CobraLangInternal = Cobra.Lang[.compiler.embedRunTimeSuffix];\n')
			
			.topNameSpace.writeJavaDef(sw)
			d = sw.curlyToCobraLineNum
		return d

	def writeJavaTestInvocation(sw as CurlyWriter) is override
		# TODO: .topNameSpace.writeJavaTestInvocation(sw)
		pass


##
## Container and friends
##

interface IParentSpace is partial
	
	get javaRef as String



##
## Types
##

class BasicLibraryType is partial

	get javaInit as String
		throw NoSourceGenerationException(this)

	get javaName as String
		throw NoSourceGenerationException(this)

	get javaNameComponent as String
		throw NoSourceGenerationException(this)

	get javaParamRef as String
		throw NoSourceGenerationException(this)

	get javaRef as String
		throw NoSourceGenerationException(this)

	def writeJavaDef(sw as CurlyWriter)
		throw NoSourceGenerationException(this)

	def writeJavaTestInvocation(sw as CurlyWriter)
		throw NoSourceGenerationException(this)


class CobraType is partial

	get javaName as String
		return .name  # TODO
