class SourceWriter inherits SharpWriter

	cue init(tw as TextWriter)
		base.init(tw)


##
## Compiler
##

class Compiler is partial

	def writeJava
		Node.setCompiler(this)
		try
			pass
/#
			TODO
			_moduleFileName_to_JavaToCobraLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for _curModule in _modules
				if not _curModule.fileName.endsWith('SystemInterfaces.cobra')
					JavaToCobraLineNum = _curModule.writeJavaDef
					_moduleFileName_to_JavaToCobraLineNum[_curModule.fileName] = JavaToCobraLineNum
					_moduleFileName_to_JavaToCobraLineNum[Path.getFullPath(_curModule.fileName)] = JavaToCobraLineNum
#/
		finally
			Node.setCompiler(nil)

	def writeJavaTestInvocation
		pass

	def compileJava
		.compileJava('')

	def compileJava(extraJavacOptions as String)
		require
			.modules.count
		body
			pass


##
## Node
##

class Node is partial

	def writeJavaDef(sw as SourceWriter)
		require .didBindInt or .didBindImp
		pass


class SyntaxNode is partial

	def writeJavaDef(sw as SourceWriter)
		base.writeJavaDef(sw)
		sw.node(this)


interface INamedNode is partial

	get javaName as String
		"""
		Return the name that should be used in C# source code.
		"""


class NamedNode is partial

	get javaName as String
		return _name

	get javaRef as String
		return .javaName


##
## Types
##

class BasicLibraryType is partial

	get javaInit as String
		throw NoSourceGenerationException(this)

	get javaName as String
		throw NoSourceGenerationException(this)

	get javaNameComponent as String
		throw NoSourceGenerationException(this)

	get javaParamRef as String
		throw NoSourceGenerationException(this)

	get javaRef as String
		throw NoSourceGenerationException(this)

	def writeJavaDef(sw as SourceWriter)
		throw NoSourceGenerationException(this)

	def writeJavaTestInvocation(sw as SourceWriter)
		throw NoSourceGenerationException(this)


class CobraType is partial

	get javaName as String
		return .name  # TODO
