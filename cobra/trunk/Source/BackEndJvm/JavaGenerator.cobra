##
## Compiler
##

class Compiler is partial

	def writeJava
		Node.setCompiler(this)
		try
			pass
			_moduleFileName_to_curlyToCobraLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for _curModule in _modules
				if not _curModule.fileName.endsWith('SystemInterfaces.cobra')
					javaToCobraLineNum = _curModule.writeJavaDef
					_moduleFileName_to_curlyToCobraLineNum[_curModule.fileName] = javaToCobraLineNum
					_moduleFileName_to_curlyToCobraLineNum[Path.getFullPath(_curModule.fileName)] = javaToCobraLineNum
		finally
			Node.setCompiler(nil)

	def writeJavaTestInvocation
		pass

	def compileJava
		.compileJava('')

	def compileJava(extraJavacOptions as String)
		require
			.modules.count
		body
			print 'Not compiling Java yet...'


##
## Node
##

class Node is partial

	def writeJavaDef(sw as CurlyWriter)
		require .didBindInt or .didBindImp
		pass


class SyntaxNode is partial

	def writeJavaDef(sw as CurlyWriter)
		base.writeJavaDef(sw)
		sw.node(this)


interface INamedNode is partial

	get javaName as String
		"""
		Return the name that should be used in C# source code.
		"""


class NamedNode is partial

	get javaName as String
		return _name

	get javaRef as String
		return .javaName


##
## Module
##

class Module is partial

	var _javaFileName = ''

	get javaFileName from var

	get javaSource as String
		if _javaFileName.length
			return File.readAllText(_javaFileName)
		else
			throw FallThroughException('csFileName is blank')

	def writeJavaDef as Dictionary<of int, int>? is abstract

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass


class SharpModule is partial

	def writeJavaDef as Dictionary<of int, int>? is override
		assert false
		return nil


class JavaModule inherits NativeModule is partial
	"""
	The purpose of a Java module is to allow the programmer to include .java source for Cobra to
	incorporate in the final compilation.
	"""

	cue init(fileName as String, verbosity as int)
		base.init(fileName, verbosity, '')
		_javaFileName = fileName

	def writeJavaDef as Dictionary<of int, int>? is override
		if false
			# kind of silly, but it works:
			d = Dictionary<of int, int>()
			for i in 1 : Utils.countChars(File.readAllText(_javaFileName), c'\n')+1
				d[i] = i
			return d	
		return nil


class AssemblyModule is partial

	get javaSource as String is override
		return '(no Java source for [this])'

	def writeJavaDef as Dictionary<of int, int>? is override
		return nil


class CobraModule is partial

	get javaFileName as String is override
		if _javaFileName == '' and not _fileName.endsWith('SystemInterfaces.cobra')
			_javaFileName = _fileName + '.java'
		return _javaFileName

	def writeJavaDef as Dictionary<of int, int>? is override
		file = File.createText(.javaFileName)
		using sw = CurlyWriter(file, CurlyLineNumberTreatment.PoundLine)
			.compiler.addIntermediateFile(_javaFileName)
			sw.start(.fileName)
			sw.write('// [_javaFileName]\n')
			sw.write('// Generated by Cobra\n')  # TODO: put version number here
			sw.write('// on [DateTime.now]\n')
			# TODO: list op sys
			sw.write('\n')

			# TODO DELME sw.write('using CobraLangInternal = Cobra.Lang[.compiler.embedRunTimeSuffix];\n')
			
			.topNameSpace.writeJavaDef(sw)
			d = sw.curlyToCobraLineNum
		return d

	def writeJavaTestInvocation(sw as CurlyWriter) is override
		# TODO: .topNameSpace.writeJavaTestInvocation(sw)
		pass


##
## Container and friends
##

interface IParentSpace is partial
	
	get javaRef as String


class Container<of TMember> is partial

	get javaInit as String  # TODO: is abstract
		return ''
		
	get javaNameComponent as String
		"""
		Returns a string that can be used in a Java identifier. That means it cannot have special symbols such as period or left bracket.
		"""
		ensure result.length > 0  # TODO? Move to interface
		return .javaRef

	var _javaRef as String?

	get javaRef as String is override
		if _javaRef is nil and .didBindImp
			_javaRef = _computeJavaRef
			return _javaRef to !
		else
			return _computeJavaRef

	get javaParamRef as String
		return .javaRef

	get _computeJavaRef as String
		if .parent
			s = .parent.javaRef
			# TODO: delme
			#if s.length and not s.endsWith('::')  # C# has weird "global::" name
			#	s += '.'
			s += .javaName
		else
			s = .javaName
		return s

	def writeJavaIsNames(sw as CurlyWriter)
		# TODO: look up Java access levels
		
		# TODO: cache this somewhere
		accessLevels = ['public', 'protected', 'internal', 'protected internal', 'private']
		# CC: accessLevels = 'public,protected,internal,protected internal,private'.split(c',')
			# same names in both Cobra and C#

		# TODO:
		# if isNames is nil
		#	isNames = _isNames
		isNames = List<of String>()
		isNames.addRange(_isNames)
		if .defaultAccessLevel.length
			found = false
			for level as String in accessLevels  # CC: axe as
				if level in isNames
					found = true
			if not found
				isNames.insert(0, .defaultAccessLevel)
		isNameJava = {
			# only have to specify the ones that are different
			'shared': 'static',
			'nonvirtual': '',
		}
		sep = ''
		for name in isNames
			name = Utils.getSS(isNameJava to passthrough, name, name) to !
			sw.write(sep)
			sw.write(name)
			sep = ' '
		if sep.length, sw.write(' ')

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass


interface IMember is partial

	def writeJavaDef(sw as CurlyWriter)
		"""
		Write the Java code for this member declaration to the given CurlyWriter.
		"""

	def writeJavaTestInvocation(sw as CurlyWriter)
		"""
		Write the Java call to the test method for this member.
		"""


##
## Types
##

class BasicLibraryType is partial

	get javaInit as String
		throw NoSourceGenerationException(this)

	get javaName as String
		throw NoSourceGenerationException(this)

	get javaNameComponent as String
		throw NoSourceGenerationException(this)

	get javaParamRef as String
		throw NoSourceGenerationException(this)

	get javaRef as String
		throw NoSourceGenerationException(this)

	def writeJavaDef(sw as CurlyWriter)
		throw NoSourceGenerationException(this)

	def writeJavaTestInvocation(sw as CurlyWriter)
		throw NoSourceGenerationException(this)


class CobraType is partial

	get javaInit as String # TODO: is abstract
		return ''

	get javaName as String
		return .name

	get javaNameComponent as String
		name = .name
		i = name.indexOf('/*')  # example: /*dynamic*/object
		if i <> -1
			j = name.indexOf('*/', i)
			name = name[:i] + name[j+2:]
		name = name.replace('.', '_').replace('<', '_').replace('>', '_').replace(', ', '_')
		return name

	get javaRef as String
		return .javaName

	get javaParamRef as String
		return .javaRef

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass


##
## Temporary
##

class AssemblyDecl is partial

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass

class BoxMember is partial

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass

class EnumMember is partial

	def writeJavaTestInvocation(sw as CurlyWriter)
		pass
