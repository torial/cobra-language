class JavaCompilationMessage inherits SourceException

	test
		line = 'hello.cobra.java:30: package Foo does not exist'
		assert not JavaCompilationMessage.willSkipMessage(line)
		msg = JavaCompilationMessage(line, TestCompiler())
		assert msg.isError
		assert msg.hasSourceSite
		assert 'hello.cobra' in msg.fileName
		assert 'package Foo does not exist' in msg.message
		assert msg.lineNum == 30

	def willSkipMessage(msg as String) as bool is shared
		return not '.java:' in msg

	var _fileName as String?
	var _lineNum as int?
	var _isError as bool

	cue init(line as String, compiler as Compiler)
		require not .willSkipMessage(line)
		base.init(line)
		# trace line
		line = line.trim
		_isError = true
		i = line.indexOf('.java:')
		_fileName = line[:i]
		i += '.java:'.length
		j = line.indexOf(':', i)
		lineStr = line[i:j]
		try
			_lineNum = int.parse(lineStr)
		catch
			pass
		success
			_lineNum = compiler.cobraLineNumForCurly(.fileName, _lineNum to !)
		if compiler.verbosity or Utils.isDevMachine, line += ' (javac)'
		_message = _cleanUp(line)

	def _cleanUp(line as String) as String
		line = line.replace("`double'", "`float'")
		line = line.replace("null", "nil")
		# change C#'s `funky' quotes to double quotes
		line = line.replace("`", '"')
		line = line.replace("'", '"')
		return line

	get isError as bool is override
		return _isError

	get hasSourceSite as bool is override
		return _fileName is not nil

	get fileName as String is override
		return _fileName to !

	get lineNum as int is override
		return _lineNum to !
