namespace Cobra.Lang

	extend System.Object

		def toTechString as String
			return CobraImp._techStringMaker.makeString(this)

		def toPrintString as String
			return CobraImp._printStringMaker.makeString(this)


	extend String
	
		def split(chars as List<of char>) as List<of String>
			test
				s = 'a,b:c:d,e,f'
				assert s.split([c',', c':']) == ['a', 'b', 'c', 'd', 'e', 'f']
			body
				return List<of String>(.split(chars.toArray) to !)
	
		def split(chars as IList<of char>) as List<of String>
			charsArray = char[](chars.count)
			for i in chars.count, charsArray[i] = chars[i]
			return List<of String>(.split(charsArray))

	
	extend System.Collections.IList

		def swap(i as int, j as int)
			temp = this[i]
			this[i] = this[j]
			this[j] = temp


	class DecimalTools

		# Cobra does not yet support extensions of primitive types
		# But the compiler will pick up "DecimalTools" as if it were
	
		shared
	
			def pow(x as decimal, y as decimal) as decimal
				test
					assert DecimalTools.pow(1, 1) == 1
					assert DecimalTools.pow(1, 2) == 1
					assert DecimalTools.pow(2, 2) == 4
					assert DecimalTools.pow(3, 4.5).round(3) == 140.296
				body
					if y.remainder(1.0) == 0 and y > 0 and y <= Int32.maxValue
						# a round power like 5.0
						r = x
						for i in y to int, r *= x
						return x
					else
						# would be nice to have a real algorithm for this to avoid the conversion to float
						# which has a smaller range, fewer significant digits and lossy representation of
						# some of decimal's values
						return (x to float).pow(y to float) to decimal

			def sqrt(x as decimal) as decimal
				test
					assert DecimalTools.sqrt(1) == 1
					assert DecimalTools.sqrt(2).round(3) == 1.414
					assert DecimalTools.sqrt(3).round(3) == 1.732
					assert DecimalTools.sqrt(4) == 2
					assert DecimalTools.sqrt(4.5).round(3) == 2.121
					expect OverflowException, DecimalTools.sqrt(-4.5)
				body
					# would be nice to have a real algorithm for this to avoid the conversion to float
					# which has a smaller range, fewer significant digits and lossy representation of
					# some of decimal's values
					return (x to float).sqrt to decimal
