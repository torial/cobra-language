namespace Cobra.Lang

	use System.Collections
	
	interface ISet<of T> inherits ICollection<of T>, IEnumerable<of T>, ISet

		## Collection type operations

		def addRange(items as IEnumerable<of T>)
		def clone as ISet<of T>
		
		## Set operations
	
		def isSubsetOf(s as ISet<of T>) as bool
		def isSupersetOf(s as ISet<of T>) as bool
		def intersection(s as ISet<of T>) as ISet<of T>
		def union(s as ISet<of T>) as ISet<of T>
		def difference(s as ISet<of T>) as ISet<of T>
		def symmetricDifference(s as ISet<of T>) as ISet<of T>
		def toList as List<of T>

		
	class Set<of T> implements ISet<of T>, ICollection<of T>, IEnumerable<of T>
		"""
		A Set holds a hashed, unordered collections of items.
		Membership testing and set operations (intersection, union, etc.) are faster than with lists, but order is not preserved.
		Set implements ICollection, so it has the usual collection operations such as `add`, `count` and `contains`.
		It also has set specific operations including `union`, `intersection` and `isSubsetOf`.

		As with other collections, to create a copy of a set, create a new one passing the original to the initializer:
			s = Set<of int>(s)

		TODO:
			[-] List style items
			[ ] Can the methods use .getType instead of hardcoding Set? Then subclasses would get created for example .intersection
			[ ] could use an indexer: s[key].  Does it return bool or T? like NSSet?
			[ ] Test without args: s = Set(s)  (test in C# too)
			[ ] yielded versions of Set operators?
			[ ] unit test CobraCore.toTechString() results
			[ ] ReadOnlySet?
			[ ] Move some method implementations up to ISet extension
		"""
	
		var _data as Dictionary<of T, T>


		## Initialization
	
		cue init
			base.init
			_data = Dictionary<of T, T>()

		cue init(capacity as int)
			base.init
			_data = Dictionary<of T, T>(capacity)

		cue init(items as IEnumerable<of T>)
			# CC: ensure for item in items assert .contains(item)    or,
			# CC: ensure for item in items get .contains(item)
			base.init
			_data = Dictionary<of T, T>()
			for item in items
				_data[item] = item


		## IEnumerable
	
		def getEnumerator as IEnumerator<of T>
			return _data.keys.getEnumerator

		def getEnumerator as System.Collections.IEnumerator
			implements System.Collections.IEnumerable
			return .getEnumerator to System.Collections.IEnumerator
	
	
		## Object
	
		def equals(other as Object?) as bool is override
			# TODO: could this be more efficient?
			if other inherits Set<of T>
				if .count <> other.count
					return false
				for item in this
					if not other.contains(item)
						return false
				for item in other
					if not .contains(item)
						return false
				return true
			else if other inherits ISet
				# TODO: cleanup the following
				if .countOfISet <> other.countOfISet
					return false
				for item in this
					if not other.contains(item)
						return false
				for item2 in other
					if not sharp'item2 is T'
						return false
					if not .contains(item2 to T)
						return false
				return true
			else
				return false

		def getHashCode as int
			code = base.getHashCode
			for item in this
				code ^= item.getHashCode
			return code


		## ICollection
	
		def add(item as T)
			ensure .contains(item)
			_data[item] = item

		def clear
			ensure .count == 0
			_data.clear

		def copyTo(array as T[], arrayIndex as int)
			_data.keys.copyTo(array, arrayIndex)

		get count as int
			ensure result >= 0
			return _data.count
		
		def contains(item as T) as bool
			return _data.containsKey(item)

		get isReadOnly as bool
			return false

		def remove(item as T) as bool
			ensure
				not .contains(item)
				# .contains(item) implies result  TODO: How to say "old this"?
			body
				return _data.remove(item)


		# ISet
		
		get countOfISet as int
			return _data.count

		def contains(item as Object) as bool
			implements ISet
			return if(sharp'item is T', .contains(item to T), false)


		## Set operations
	
		def isSubsetOf(s as ISet<of T>) as bool
			for item in this
				if not s.contains(item)
					return false
			return true

		def isSupersetOf(s as ISet<of T>) as bool
			return s.isSubsetOf(this)

		def intersection(s as ISet<of T>) as ISet<of T>
			"""
			Returns a new set containing only the elements that are in this set and `s`. (AND)
			"""
			r = Set<of T>()
			for item in this
				if s.contains(item)
					r.add(item)
			return r

		def union(s as ISet<of T>) as ISet<of T>
			"""
			Returns a new set containing the elements of that are in this set or `s`. (OR)
			"""
			r = Set<of T>(this)
			r.addRange(s)
			return r
	
		def difference(s as ISet<of T>) as ISet<of T>
			"""
			Returns a new set with elements in this set that are not in `s`.
			"""
			r = Set<of T>()
			for item in this
				if not s.contains(item)
					r.add(item)
			return r

		def symmetricDifference(s as ISet<of T>) as ISet<of T>
			"""
			Returns a new set with elements in either s or t but not both. (XOR)
			"""
			r = Set<of T>()
			for item in this
				if not s.contains(item)
					r.add(item)
			for item in s
				if not .contains(item)
					r.add(item)
			return r


		## List<of T>-inspired Members
	
		def addRange(items as ISet<of T>)
			# ensure all (for item in items get .contains(item))
			for item in items
				.add(item)
	
		def addRange(items as IEnumerable<of T>)
			for item in items
				.add(item)

		#def asReadOnly as ReadOnlyCollection<of T>
			# TODO

		# TODO
		#def convertAll<of TOutput>(converter as Converter<of T, TOutput>) as Set<of TOutput>
		#	newSet = Set<of TOutput>()
		#	for item in this
		#		newSet.add(converter(item))
		#	return newSet

		# TODO
		#def exists(predicate as Predicate<of T>) as bool
		#	for item in this
		#		if predicate(item)
		#			return true
		#	return false
		
		# TODO: find
		# TODO: findAll
		# TODO: forEach (or for)
		# TODO: removeAll
		# TODO: trueForAll

		## Other
		
		def clone as ISet<of T>  # CC: as same
			"""
			Returns a new set with the contents of this set.
			Does not clone the contents themselves.
			This is sometimes known as a "shallow copy".
			"""
			ensure
				result is not this
				result.count == .count
				result.typeOf is .typeOf
			body
				type = .typeOf
				newList = type(this)
				return newList

		def toList as List<of T>
			return List<of T>(this)

	interface ISet inherits IEnumerable
		"""
		This interface is to facilitate Set<of>.equals when the generic types are different (which
		does not necessarily restrict the two sets from having the same contents).
		
		Use ISet<of T> instead.
		"""
		get countOfISet as int
		def contains(item as Object) as bool

	class TestSet

		test
			s = Set<of int>()
			assert s.count == 0
			t = Set<of int>() to ISet<of int>
			assert t.count == 0
			assert s is not t
			assert s == t
		
			s.add(1)
			assert s.contains(1)
			assert not s.contains(2)
			assert s <> t
			assert t.isSubsetOf(s)
			assert s.isSupersetOf(t)
			t.add(1)
			assert s == t
			
			s.clear
			t.clear
			assert s.count == 0

			s.add(1)
			t = s.clone
			assert t is not s
			assert t.count == s.count
			assert 1 in t and 2 not in t
			s.clear
			t.clear
			
			u = s.union(t)
			assert t is not u
			assert s.count == 0
			assert t.count == 0
			assert u.count == 0

			s = Set<of int>()
			s.add(1)
			assert s.contains(1)
			assert not s.contains(2)
			
			# remove
			s.remove(1)
			assert s.count == 0
			assert not s.contains(1)

			# double add
			s.add(1)
			s.add(1)
			assert s.count == 1
			assert s.contains(1)

			# make lists and sets from each other
			s = Set<of int>([1, 2])
			assert s.contains(1) and s.contains(2) and s.count == 2
			list = List<of int>(s)
			assert list == [1, 2] or list == [2, 1]

			# repeated element
			s = Set<of int>([1, 1])
			assert s.contains(1) and not s.contains(2) and s.count == 1
			s.add(1)
			assert s.contains(1) and not s.contains(2) and s.count == 1

			# set operations
			r = Set<of int>([1, 2]).intersection(Set<of int>([2, 3]))
			assert r.toList == [2]

			r = Set<of int>([1, 2]).union(Set<of int>([2, 3]))
			list = r.toList
			list.sort
			assert list == [1, 2, 3]
			
			r = Set<of int>([1, 2]).difference(Set<of int>([2, 3]))
			assert r.toList == [1]

			r = Set<of int>([1, 2]).symmetricDifference(Set<of int>([2, 3]))
			assert r.toList == [1, 3] or r.toList == [3, 1]

