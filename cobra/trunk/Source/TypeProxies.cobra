interface ITypeProxy
	inherits INode
	"""
	An ITypeProxy is a node that represents/stands-in for a type.
	Its .realType property returns that type, often by locating it among symbols.
	Implemented by CobraType, AbstractTypeIdentifier, NilableTypeProxy and ClrTypeProxy.
	"""

	# TODO: See above NOTE and consider adding name below. Also see _bindBase in Boxes.cobra which would benefit from .name
#	get name as String
#		"""
#		Return the name of the type.
#		"""

	get realType as IType
		"""
		Returns the type that this node represents or .throwError if the type cannot be located.
		"""


class AbstractTypeProxy
	is abstract
	inherits Node
	implements ITypeProxy

	get realType as IType is abstract


class TypeProxy
	inherits AbstractTypeProxy
	"""
	Once in awhile you might need to pass or use an ITypeProxy even though you already know the type (probably because it is a builtin type such as `int` or `dynamic`.
	In that case, you can use TypeProxy(someType)
	"""

	var _type as IType

	cue init(type as IType)
		base.init
		_type = type

	get realType as IType is override
		return _type


class LibraryTypeProxy
	inherits AbstractTypeProxy
	"""
	Relies on .compiler.libraryType(qualifiedName) to locate the Cobra type.
	Useful for the primitive types that need a reference to, for example, System.Char.
	"""

	var _qualifiedName as String
	
	cue init(qualifiedName as String)
		base.init
		_qualifiedName = qualifiedName

	get qualifiedName from var
	
	get realType as IType is override
		return .typeProvider.libraryType(_qualifiedName)


class NilableTypeProxy
	inherits AbstractTypeProxy
	"""
	Returns the type proxy it is given wrapped in a NilableType.
	Used when scanning, for example, method arguments in DLLs. See _scan* in Box.
	"""

	var _innerType as ITypeProxy

	cue init(innerType as ITypeProxy)
		base.init
		_innerType = innerType

	get innerTypeProxy as ITypeProxy  # TODO: should probably rename to nonNil
		return _innerType

	def addMinFields
		base.addMinFields
		.addField('innerTypeProxy', .innerTypeProxy)

	get realType as IType is override
		return .typeProvider.nilableType(_innerType.realType)


class VariTypeProxy
	inherits AbstractTypeProxy
	"""
	Returns the type proxy it is given wrapped in a VariType.
	Used when scanning, for example, method arguments in DLLs. See _scan* in Box.
	"""

	var _innerType as ITypeProxy

	cue init(innerType as ITypeProxy)
		base.init
		_innerType = innerType

	get innerTypeProxy as ITypeProxy
		return _innerType

	def addMinFields
		base.addMinFields
		.addField('innerTypeProxy', .innerTypeProxy)

	get realType as IType is override
		return VariType(_innerType.realType)


class ClrTypeProxy inherits AbstractTypeProxy
	"""
	Acts as an ITypeProxy where the CLR type is known.
	Typically used when scanning DLLs.
	"""

	shared

		var _cobraNameForSharpGenericNameCache = Dictionary<of String, String>()

		def cobraNameForSharpBoxName(name as String) as String
			"""
			Returns 'Foo' for 'Foo' and 'Foo<of,>' for 'Foo`2'
			In other words, works for generic and non-generic classes, structs and interfaces.
			Does *not* work for arrays, pointers, etc.
			"""
			if '`' not in name
				return name
			if _cobraNameForSharpGenericNameCache.containsKey(name)
				return _cobraNameForSharpGenericNameCache[name]
			else
				parts = name.split(c'`')
				count = int.parse(parts[1])
				cobraName = parts[0] + '<of'
				for i in count-1, cobraName += ','
				cobraName += '>'
				_cobraNameForSharpGenericNameCache[name] = cobraName
				return cobraName

	var _clrType as Type


	cue init(nativeType as NativeType)  # TODO: HACK
		.init((nativeType to ClrNativeType).clrType)

	cue init(clrType as Type)
		base.init
		_clrType = clrType

	def addMinFields
		base.addMinFields
		.addField('clrType', _clrType)

	get realType as IType is override
		return _realTypeWithCache(_clrType)

	def _realTypeWithCache(clrType as Type) as IType
		t = (.compiler to Compiler).typeForClrType(clrType)
		if t is nil
			t = _realTypeWithoutCache(clrType, 0)
			(.compiler to Compiler).addTypeForClrType(t to !, clrType)
		return t to !
	
	def _realTypeWithoutCache(clrType as Type, level as int) as IType
		assert .compiler.basicTypes.count > 9   # should have bool, char, all the ints, etc.
		
		# Must return the Cobra primitive types in place of System.Boolean, System.Char, System.Int16, etc.
		# because it's the primitives that are used all over the compiler.
		clrPrimitiveToIType = .compiler.clrPrimitiveToITypeCache
		if clrPrimitiveToIType is nil or clrPrimitiveToIType.count == 0
			clrPrimitiveToIType = _makePrimitiveTypesDict
		basicType as IType?
		if clrPrimitiveToIType.tryGetValue(clrType, out basicType)
			return basicType to !
		
		# handle wrapped types, like arrays and pointers, with recursive calls
		if clrType.isArray
			# assert clrType.name.endsWith(r'[]') # could be [,] so TODO: handle multidim arrays
			return .typeProvider.arrayType(_realTypeWithCache(clrType.getElementType to !))
		else if clrType.isNested and not clrType.isGenericParameter
			declaringType = _realTypeWithCache(clrType.declaringType to !)
			potential = declaringType.memberForName(clrType.name)
			if potential is nil
				# comes up on MS Windows .NET 2.0 for multiple types when using System.Windows.Forms
				# error: Cannot locate nested CLR type "System.Windows.Forms.UnsafeNativeMethods+IOleControl" (simple name is "IOleControl").
				if 'NativeMethods' in clrType.toString
					return _hack(clrType)
				.throwError('Cannot locate nested CLR type "[clrType]" (simple name is "[clrType.name]").')
			else if potential inherits IType
				return potential
			else
				.throwError('Located CLR type spec "[clrType]" but got a [potential.englishName] instead of a type.')
		else if clrType.isPointer
			assert clrType.name.endsWith('*')
			# TODO: handle pointer types
			return _realTypeWithCache(clrType.getElementType to !)
		else if clrType.isByRef
			assert clrType.name.endsWith('&')
			# TODO: handle ref types
			return _realTypeWithCache(clrType.getElementType to !)

		# generic parameters
		if clrType.isGenericParameter
			return GenericParam(ClrNativeType(clrType))

		typeName = _computeTypeName(clrType)
		missing = false
		curNS = _computeNameSpace(clrType, level, out missing)
		if missing
			# since the CLR type exists, but cannot be located in our namespaces,
			# it must be pulled from a dependent DLL that was not directly referenced
			# but maybe it was already attempted
			if level > 0, .throwError('Cannot read CLR type "[clrType.fullName]" or its assembly "[clrType.assembly]". Please report to the Cobra discussion forums (http://cobra-language.com/).')

			(.compiler to dynamic).readAssembly(clrType.assembly)
			return _realTypeWithoutCache(clrType, level+1) # recurse. guard is just above.

		# return namespace member
		member as IMember? = curNS.declForName(typeName)
		if member inherits IType
			if member inherits Box
				if clrType.isGenericType and not clrType.isGenericTypeDefinition
					# So we have something like ICollection<of KeyValuePair<of TKey,TValue>> which is all CLR types.
					# We need the Cobra types of those args so we can construct the Cobra type from the generic cobra type
					# otherwise, we would just end up returning the generic definition.
					member = _typeForArgsOfGeneric(clrType, member)
			return member
		else
			msg = 'Cannot locate CLR type "[clrType]".'
			if clrType.namespace and clrType.namespace.startsWith('System.')
				# TODO: On .NET 2.0 only \Tests\110-basics-two\550-collection-equality.cobra
				# fails with: Cannot locate CLR type "System.Collections.KeyValuePairs[]".
				# Figure out why.
				if .compiler and .compiler.verbosity > 1
					print msg
				# TODO: .compiler.warning(msg)
				return .compiler.objectType
			else
				.throwError(msg)
		return .compiler.intType  # CC: to make C# code gen happy.

	def _makePrimitiveTypesDict as Dictionary<of System.Type, IType>
		clrPrimitiveToIType = Dictionary<of System.Type, IType>()
		for bt in .compiler.basicTypes
			if bt.systemAliasProxy
				key = (.compiler.nativeType((bt.systemAliasProxy to LibraryTypeProxy).qualifiedName) to ClrNativeType).clrType # TODO: cleanup
				clrPrimitiveToIType[key] = bt
		assert clrPrimitiveToIType.count == 0 or clrPrimitiveToIType.count > 9
		return clrPrimitiveToIType

	def _computeTypeName(clrType as Type) as String
		typeName = clrType.name
		if '`' in typeName
			# generic like IComparable`1
			assert r'[' not in typeName
			typeName = .cobraNameForSharpBoxName(typeName)
		else if typeName[typeName.length-1].isLetterOrDigit
			pass
		else
			.throwError('Cannot locate CLR type "[clrType]".')
		return typeName

	def _computeNameSpace(clrType as Type, level as int, missing as out bool) as NameSpace
		missing = false
		if clrType.namespace is nil, return .compiler.globalNS
		nameParts = clrType.namespace.split(c'.')
		member = .compiler.globalNS.symbolForName(nameParts[0])
		if member inherits NameSpace, curNS = member
		else, missing = true
		if not missing
			i = 1
			while i < nameParts.length
				namePart = nameParts[i]
				possible = curNS.declForName(namePart)
				if possible is nil
					missing = true
					break
				else if possible inherits NameSpace
					curNS = possible
				else
					.throwError('Found "[namePart]" at component [i+1] of CLR type "[clrType.fullName]", but it is a [possible.englishName].')
				i += 1
		return curNS	

	def _typeForArgsOfGeneric(clrType as Type, member as IType) as IType
		args = List<of IType>()
		for genArg in clrType.getGenericArguments
			args.add(_realTypeWithCache(genArg))
		boxMember = member to Box
		if boxMember.qualifiedName == 'System.Nullable<of>'
			assert args.count == 1
			member = .typeProvider.nilableType(args[0])
		else
			member = boxMember.constructedTypeFor(args)
		return member	

	def _hack(clrType as Type) as IType
		if clrType.isInterface
			return ClrTypeProxy(sharp'typeof(System.ICloneable)').realType
		else
			return ClrTypeProxy(Object).realType


##
## Type Identifiers
##

class AbstractTypeIdentifier
	is abstract
	inherits SyntaxNode
	implements ITypeProxy
	"""
	The ancestor class for specific kinds of type identifiers including TypeIdentifier, GenericTypeIdentifier, WrappedTypeIdentifier and more.
	"""

	var _name as String
	var _actualType as IType? is private
	var _didResolveType as bool is private

	cue init(token as IToken, name as String)
		base.init(token)
		_name = name

	cue init(token as IToken, name as String, type as IType)
		.init(token, name)
		_actualType = type
		_didResolveType = true

	def addMinFields is override
		base.addMinFields
		.addField('name', _name)
		.addField('didResolveType', _didResolveType)

	def addRefFields is override
		base.addSubFields
		.addField('actualType', _actualType)

	get name from var

	get actualType from var

	get didResolveType from var

	get realType as IType
		ensure .actualType
		if not .didResolveType
			_actualType = _resolveType()
			assert .actualType
			_didResolveType = true
			_recommendBuiltInType
		assert _actualType
		return _actualType to !

	def _recommendBuiltInType
		if _actualType.parentNameSpace and _actualType.parentNameSpace.fullName == 'System'
			n = nil to String?
			branch _actualType.name
				on 'Boolean', n = 'bool'
				on 'SByte',   n = 'int8'
				on 'Byte',    n = 'uint8'
				on 'Int16',   n = 'int16'
				on 'UInt16',  n = 'uint16'
				on 'Int32',   n = 'int32'
				on 'UInt32',  n = 'uint32'
				on 'Int64',   n = 'int64'
				on 'UInt64',  n = 'uint64'
				on 'Char',    n = 'char'
				on 'Single',  n = 'float32'
				on 'Double',  n = 'float'
				on 'Decimal', n = 'decimal'
			if n, .compiler.warning(this, 'Use the builtin type "[n]" instead of the struct "[_actualType.name]".')

	def equals(other as Object?) as bool is override
		if other is nil
			return false
		if this is other
			return true
		if other inherits AbstractTypeIdentifier
			if _actualType and other._actualType
				return _actualType.equals(other._actualType)
			else
				return _name.equals(other._name)
		return false

	def getHashCode as int is override
		return _name.getHashCode

	def memberFrom(container as IContainer) as IMember?
		"""
		Used to get the real member represented by this type identifier in container.
		Used for qualified types such as:
			System.Windows.Forms.Control
			System.Collections.Generic.List<of String>
		The default implementation is:
			return container.memberForName(.name)
		Generics have to do more work, though.
		So do types with funky names.
		"""
		return container.memberForName(.name)

	def _resolveType as IType is abstract
		"""
		Invoked by .realType only when needed.
		Subclasses must override to compute and return the actual type that this identifier represents (or invoke `.throwError('...')`).
		Subclasses should not bother with other operations such as checking or setting _actualType or _didResolveType to true.
		Subclasses need not invoke `base`.
		"""

	def _symbolForName(name as String) as IMember
		"""
		Returns the symbol for this node's name or .throwError.
		Also, implements -correct-source:case or suggests it if it is off, but would have resolved.
		"""
		# don't need to check "basic types" like int, bool, etc. here. the parser does those.
		if name.isCapitalized
			symbol = .compiler.symbolForName(name, false)  # nested enum and class types are capitalized and can be members of the current class
		else  # examples: wx.NET, libtcodWrapper.Console
			symbol = .compiler.symbolForName(name, false, true)
		if symbol is nil
			correctCase = 'case' in .compiler.options.setValue('correct-source')
			if correctCase
				if not name.isCapitalized
					# not very sophisticated, but catches 'string', 'object', etc.
					name = name.capitalized
					symbol = .compiler.symbolForName(name, false)
					if symbol is not nil
						if '<' in name  # handle generics
							# 'dictionary<of ' vs. 'Dictionary<of,>'
							name = name[:name.indexOf('<')] + .token.text[.token.text.indexOf('<'):]
							assert name.length == .token.text.length
						.compiler.correctSource(.token, name)
			if symbol is nil
				sugg = Compiler.suggestionFor(name) ? ''
				if sugg == '' and not name.isCapitalized
					other = .compiler.symbolForName(name.capitalized, false)
					if other, sugg = name.capitalized
				if sugg <> '', sugg = ' Try "[sugg]". Also, consider the -correct-source option (see cobra -h for details).'
				.throwError('Cannot find type for "[_name]".[sugg]')
		return symbol to !


class WrappedTypeIdentifier
	is abstract
	inherits AbstractTypeIdentifier

	var _typeId as AbstractTypeIdentifier

	cue init(token as IToken, typeId as AbstractTypeIdentifier)
		require
			token.text.length
		ensure
			.name.length
		body
			base.init(token, token.text)
			_typeId = typeId

	def addMinFields
		base.addMinFields
		.addField('typeId', _typeId)

	get theWrappedTypeIdentifier from _typeId

	def _bindInt is override
		_typeId.bindInt
		base._bindInt

	def _bindImp is override
		_typeId.bindImp
		base._bindImp


class ArrayTypeIdentifier inherits WrappedTypeIdentifier

	cue init(token as IToken, typeId as AbstractTypeIdentifier)
		base.init(token, typeId)

	def memberFrom(container as IContainer) as IMember? is override
		return container.memberForName(.theWrappedTypeIdentifier.name)

	def _resolveType as IType is override
		return .typeProvider.arrayType(_typeId.realType)


class NilableTypeIdentifier
	inherits WrappedTypeIdentifier
	"""
	Foo?
	"""

	cue init(token as IToken, typeId as AbstractTypeIdentifier)
		base.init(token, typeId)

	def _resolveType as IType is override
		return .typeProvider.nilableType(_typeId.realType)

	get name as String is override
		return _typeId.name + '?'

	def memberFrom(container as IContainer) as IMember? is override
		m = container.memberForName(.name[:-1])
		if m inherits IType
			return .typeProvider.nilableType(m)
		else
			return m


class StreamTypeIdentifier
	inherits WrappedTypeIdentifier
	"""
	Foo*
	"""

	cue init(token as IToken, typeId as AbstractTypeIdentifier)
		base.init(token, typeId)
	
	def _resolveType as IType is override
		t = StreamType(_typeId.realType)
		t.bindInh
		t.bindInt
		return t

	get name as String is override
		return _typeId.name + '*'


class VariTypeIdentifier
	inherits WrappedTypeIdentifier

	cue init(token as IToken, typeId as AbstractTypeIdentifier)
		base.init(token, typeId)

	def _resolveType as IType is override
		t = VariType(_typeId.realType)
		t.bindInh
		t.bindInt
		return t


class TypeIdentifier
	inherits AbstractTypeIdentifier
	"""
	Created by CobraParser.type for identifiers found where types are
	expected.

	Cobra allows forward references so even though types are expected in
	places like the return type of a method, they cannot be turned into
	actual types until the bindInt phase (or bindImp for expressions).
	"""

	cue init(token as IToken)
		require
			token.which=='ID'
			token.text.length
		ensure
			.name.length
		body
			base.init(token, token.text)

	cue init(token as IToken, type as IType)
		require
			token.text.length
		ensure
			.name.length
		body
			base.init(token, token.text, type)

	cue init(token as IToken, name as String, type as IType)
		"""
		Use this to dictate a name other than what is specified by the token.
		Used for QualifiedTypes, for example, that are created from multiple tokens.
		"""
		require
			name.length
		ensure
			.name.length
		body
			base.init(token, name, type)
			assert name == token.text

	def _resolveType as IType is override
		symbol = _symbolForName(.name) to dynamic
		if symbol inherits ITypeProxy
			return symbol.realType
		else
			throw FallThroughException(symbol)


class GenericTypeIdentifier inherits AbstractTypeIdentifier
	"""
	The parser produces these when it encounters "List<of String>", for example.
	"""

	var _rootName as String    # ex: 'List'
	var _fullName as String    # ex: 'List<of String>'
	var _typeRefName as String # ex: 'List<of>' 'IDictionary<of,>' -- matches the actual box

	var _numArgs as int
	var _typeNodes as List<of ITypeProxy>?

	cue init(token as IToken, rootName as String, fullName as String, typeNodes as List<of ITypeProxy>)
		require
			token.which=='OPEN_GENERIC'
			rootName.length and '<of' not in rootName
			fullName.length and '<of' in fullName
			typeNodes.count
		body
			.init(token, rootName, fullName, typeNodes, 0)

	cue init(token as IToken, rootName as String, fullName as String, numArgs as int)
		require
			token.which=='OPEN_GENERIC'
			rootName.length and '<of' not in rootName
			fullName.length and '<of' in fullName
			numArgs > 0
		body
			.init(token, rootName, fullName, nil, numArgs)

	cue init(token as IToken, rootName as String, fullName as String, typeNodes as List<of ITypeProxy>?, numArgs as int) is protected
		require typeNodes or numArgs > 0
		base.init(token, fullName)
		_rootName, _fullName = rootName, fullName
		if typeNodes
			_typeNodes = typeNodes
			_typeRefName = _rootName + '<of'
			# TODO: String(c',', _typeNodes.count-1) ?
			for i in _typeNodes.count-1, _typeRefName += ','
			_typeRefName += '>'
			_numArgs = _typeNodes.count
		else
			_typeRefName = fullName
			_numArgs = numArgs
		_name = fullName

	get numArgs from var

	get typeNodes from var

	def memberFrom(container as IContainer) as IMember? is override
		# happens for a qualified generic. See ../Tests/160-qualified/200-qual-generic.cobra
		genericType = container.memberForName(_typeRefName)
		assert genericType
		return _locateType(genericType to !)

	def _resolveType as IType is override
		symbol = _symbolForName(_typeRefName)
		return _locateType(symbol)

	def _locateType(genericType as IMember) as IType
		if genericType inherits Box
			if not genericType.isGeneric
				.throwError('"[_rootName]" is not a generic type.')
			if _typeNodes
				types = List<of IType>()
				for tn in _typeNodes, types.add(tn.realType)
				if genericType.genericParams.count <> types.count
					.throwError('The generic type "[_rootName]" expects [genericType.genericParams.count] type arguments, not [types.count].')
				t = genericType.constructedTypeFor(types)
				assert t.genericParams == types
				assert t.isGeneric and not t.isGenericDef
			else
				t = genericType
				assert t.isGeneric and t.isGenericDef
			return t
		else if genericType inherits IType
			.throwError('"[_rootName]" is not a generic type.')
			return nil to passthrough
		else
			assert false, 'When does this happen?'
			.throwError('The definition for "[_fullName]" is not a type.')
			return nil to passthrough


class QualifiedTypeIdentifier
	inherits AbstractTypeIdentifier

	var _typeNodes as List<of AbstractTypeIdentifier>

	cue init(typeNodes as List<of AbstractTypeIdentifier>)
		require typeNodes.count > 1
		base.init(typeNodes[0].token, '(uninitialized name)')
		_typeNodes = typeNodes
		sb = StringBuilder()
		sep = ''
		for t in typeNodes
			sb.append(sep)
			sb.append(t.name)
			sep = '.'
		_name = sb.toString
		# TODO: would it be useful to set the _token.text to the name? Maybe it would help with syntax highlighting

	get typeNodes from var

	def _resolveType as IType is override
		member = _symbolForName(_typeNodes[0].name) to ?
		i = 1
		while i < _typeNodes.count and member <> nil
			if member inherits IContainer
				m = _typeNodes[i].memberFrom(member)
				if m
					member = m
				else
					.throwError('Cannot find "[_typeNodes[i].name]" at component [i+1] of qualified type.')
				i += 1
			else
				.throwError('"[member]" cannot contain additional members.')
		if member inherits NameSpace  # TODO: remove when NameSpace is no longer an IType
			.throwError('The definition for "[_name]" is a namespace, not a type.')
		if member inherits IType
			return member
		else
			.throwError('The definition for "[_name]" is not a type.')
			throw Exception('') # CC: axe when 'always throws' for methods is available
