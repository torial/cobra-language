"""
The code in this file should not .throwError, record warnings, etc.
All of that happens during .bindFoo phases.

Check-in comment:
ObjC back-end progress.
"""


##
## Compiler
##

class Compiler is partial

	var _objcSource = Dictionary<of String, StringWriter>()

	def createObjcFile(fileName as String) as TextWriter
		"""
		Creates a new TextWriter for writing sharp source code.
		Will create a physical file or string writer as appropriate.
		"""
		if .willWriteSharpToDisk  # to-do: change Sharp to Source
			return File.createText(fileName)
		else
			sw = StringWriter()
			_objcSource[fileName] = sw
			return sw

	def computeOutNameObjc as String
		outName =''
		if .options.boolValue('test')
			outName = _modules.last.fileName
		else if .options.containsKey('out')
			outName = .options.getDefault('out', '')
		if outName == '', outName = .defaultOutName to !
		if outName.endsWith('.objc') or outName.endsWith('.OBJC'), outName = outName[:-5]
		if outName.endsWith('.cobra') or outName.endsWith('.COBRA'), outName = outName[:-6]
		_baseExeFileName = outName
		# outName = Utils.forceExtension(outName, '....')  # No extension for ObjC on Mac & Linux
		_fullExeFileName = outName
		return outName
		
	def writeObjc
		Node.setCompiler(this)
		try
			_moduleFileName_to_curlyToCobraLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for _curModule in _modules
				if not _curModule.fileName.endsWith('SystemInterfaces.cobra')
					objcToCobraLineNum = _curModule.writeJavaDef
					_moduleFileName_to_curlyToCobraLineNum[_curModule.fileName] = objcToCobraLineNum
					_moduleFileName_to_curlyToCobraLineNum[Path.getFullPath(_curModule.fileName)] = objcToCobraLineNum
		finally
			Node.setCompiler(nil)

	def writeObjcTestInvocation
		# TODO
		pass

	def compileObjc
		.compileObjc('')

	def compileObjc(extraGccOptions as String)
		require
			.modules.count
		body
			if .verbosity >= 2, print 'Compiling generated code'
			# options = .options
			print 'Not compiling objc code yet.'


##
## Node
##

class Node is partial

	def writeObjcDef(sw as CurlyWriter)
		require .didBindInt or .didBindImp
		pass


class SyntaxNode is partial

	def writeObjcDef(sw as CurlyWriter)
		base.writeSharpDef(sw)
		sw.node(this)


interface INamedNode is partial

	get objcName as String
		"""
		Return the name that should be used in Obj-C source code.
		"""


class NamedNode is partial

	get objcName as String
		return _name

	get objcRef as String
		return .sharpName


##
## Module
##

class Module is partial

	var _objcSource as String?
	var _objcFileName = ''

	get objcFileName from var

	get objcSource as String
		if _objcSource, return _objcSource
		if _objcFileName.length
			return File.readAllText(_objcFileName)
		else
			throw FallThroughException('No objc source or filename.')

	def writeObjcDef as Dictionary<of int, int>? is abstract

	def writeObjcTestInvocation(sw as CurlyWriter)
		pass


class JavaModule is partial

	def writeObjcDef as Dictionary<of int, int>? is override
		assert false
		return nil


class SharpModule is partial

	def writeObjcDef as Dictionary<of int, int>? is override
		assert false
		return nil


class AssemblyModule is partial

	get objcSource as String is override
		return '(no objc source for [this])'

	def writeObjcDef as Dictionary<of int, int>? is override
		return nil


class CobraModule is partial

	get objcFileName as String is override
		if _objcFileName == '' and not _fileName.endsWith('SystemInterfaces.cobra')
			_objcFileName = _fileName + '.m'
		return _objcFileName

	def writeObjcDef as Dictionary<of int, int>? is override
		file = (.compiler to Compiler).createObjcFile(.objcFileName)
		using sw = CurlyWriter(file, CurlyLineNumberTreatment.PoundLine)
			.compiler.addIntermediateFile(_objcFileName)
			sw.start(.fileName)
			sw.write('// [_objcFileName]\n')
			sw.write('// Generated by Cobra\n')  # TODO: put version number here
			sw.write('// on [DateTime.now]\n')
			# TODO: list op sys
			sw.write('\n')

			sw.write('using CobraLangInternal = Cobra.Lang[.compiler.embedRunTimeSuffix];\n')
			
			.topNameSpace.writeObjcDef(sw)
			d = sw.curlyToCobraLineNum
		if false
			bar = '----------------------------------------------'
			print bar
			print file.toString
			print bar
		return d

	def writeObjcTestInvocation(sw as CurlyWriter) is override
		.topNameSpace.writeObjcTestInvocation(sw)


##
## Container and friends
##

interface IParentSpace is partial
	
	get objcRef as String


class Container<of TMember> is partial

	get objcInit as String is abstract

	get objcNameComponent as String
		"""
		Returns a string that can be used in a Obj-C identifier. That means it cannot have special symbols such as period or left bracket.
		"""
		ensure result.length > 0  # TODO? Move to interface
		return .objcRef

	var _objcRef as String?

	get objcRef as String is override
		if _objcRef is nil and .didBindImp
			_objcRef = _computeObjcRef
			return _objcRef to !
		else
			return _computeObjcRef

	get objcParamRef as String
		return .objcRef

	get _computeObjcRef as String
		if .parent
			s = .parent.objcRef
			if s.length and not s.endsWith('::')  # Obj-C has weird "global::" name  # to-do: not an obj-c thing
				s += '.'
			s += .objcName
		else
			s = .objcName
		return s

	def writeObjcIsNames(sw as CurlyWriter)
		# TODO: cache this somewhere
		accessLevels = ['public', 'protected', 'internal', 'protected internal', 'private']
		# CC: accessLevels = 'public,protected,internal,protected internal,private'.split(c',')
			# same names in both Cobra and Obj-C

		# TODO:
		# if isNames is nil
		#	isNames = _isNames
		isNames = List<of String>()
		isNames.addRange(_isNames)
		if .defaultAccessLevel.length
			found = false
			for level as String in accessLevels  # CC: axe as
				if level in isNames
					found = true
			if not found
				isNames.insert(0, .defaultAccessLevel)
		isNameCS = {
			# only have to specify the ones that are different
			'shared': 'static',
			'nonvirtual': '',
		}
		sep = ''
		for name in isNames
			name = Utils.getSS(isNameCS to passthrough, name, name) to !
			sw.write(sep)
			sw.write(name)
			sep = ' '
		if sep.length
			sw.write(' ')

	def writeObjcTestInvocation(sw as CurlyWriter)
		pass


interface IMember is partial

	def writeObjcDef(sw as CurlyWriter)
		""" Write the Obj-C code for this member declaration to the given CurlyWriter. """

	def writeObjcTestInvocation(sw as CurlyWriter)
		""" Write the Obj-C call to the test method for this member. """


## to-do stubs ------------------------------------------------------------------------------------------

class BasicLibraryType is partial

	def writeObjcDef(cw as CurlyWriter)
		pass
	
	def writeObjcTestInvocation(cw as CurlyWriter)
		pass

	get objcName as String
		return .name


class CobraType is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass

	get objcName as String
		return .name

class EnumMember is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass

class BoxMember is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass

class AssemblyDecl is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass

class EnumDecl is partial

	get objcInit as String is override
		return ''

class NameSpace is partial

	get objcInit as String is override
		return ''

class Class is partial

	get objcInit as String is override
		return ''

class Interface is partial

	get objcInit as String is override
		return ''

class Struct is partial

	get objcInit as String is override
		return ''

class Extension is partial

	get objcInit as String is override
		return ''

