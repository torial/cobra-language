"""
Objective-C Code Generator

The code in this file should not .throwError, record warnings, etc.
All of that happens during .bindFoo phases.

cobra -back-end:objc hello

Check-in comment:
ObjC back-end progress.
"""


##
## Compiler
##

class Compiler is partial

	var _objcSource = Dictionary<of String, StringWriter>()

	def createObjcFile(fileName as String) as TextWriter
		"""
		Creates a new TextWriter for writing sharp source code.
		Will create a physical file or string writer as appropriate.
		"""
		return File.createText(fileName)

	def computeOutNameObjc as String
		outName =''
		if .options.boolValue('test')
			outName = _modules.last.fileName
		else if .options.containsKey('out')
			outName = .options.getDefault('out', '')
		if outName == '', outName = .defaultOutName to !
		if outName.endsWith('.objc') or outName.endsWith('.OBJC'), outName = outName[:-5]
		if outName.endsWith('.cobra') or outName.endsWith('.COBRA'), outName = outName[:-6]
		_baseExeFileName = outName
		# outName = Utils.forceExtension(outName, '....')  # No extension for ObjC on Mac & Linux
		_fullExeFileName = outName
		return outName
		
	def writeObjc
		Node.setCompiler(this)
		try
			_moduleFileName_to_curlyToCobraLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for _curModule in _modules
				if not _curModule.fileName.endsWith('SystemInterfaces.cobra')
					objcToCobraLineNum = _curModule.writeObjcDef
					_moduleFileName_to_curlyToCobraLineNum[_curModule.fileName] = objcToCobraLineNum
					_moduleFileName_to_curlyToCobraLineNum[Path.getFullPath(_curModule.fileName)] = objcToCobraLineNum
		finally
			Node.setCompiler(nil)

	def writeObjcTestInvocation
		# TODO
		pass

	def compileObjc
		.compileObjc('')

	def compileObjc(extraNativeOptions as String)
		require
			.modules.count
		body
			.options['keep-intermediate-files'] = true   # to-do: remove this much later. need to look at generated objc quite often right now

			if .verbosity >= 2, print 'Compiling generated code'
			options = .options

			# locate the native compiler
			compilerPath = options.getDefault('native-compiler', '') to String
			if compilerPath == 'auto', compilerPath = ''
			if compilerPath <> ''
				if File.exists(compilerPath)
					pass
				else if File.exists(compilerPath+'.exe')
					compilerPath += '.exe'
				else
					# to-do: change print statement to an error
					print 'Cannot find compiler specified by -native-compiler argument: [compilerPath]'
					throw StopCompilation(this)
			else
				compilerPath = if(Utils.isRunningOnUnix, 'gcc', 'gcc.exe')

			# to-do: use or axe: optChar = '-'
			
			# exeNames
			outName = .computeOutNameObjc

			# compute backEndOptions
			backEndOptions = ''

			backEndOptions += ' -O3'  # to-do: make conditional on Cobra's -o option.
			backEndOptions += ' -fobjc-gc-only'
			backEndOptions += ' -framework Foundation'

			# to-do: debug flag
			
			# to-do: respect -native-compiler
			compilerPath = 'gcc'
			
			backEndOptions += ' ' + extraNativeOptions
			
			nativeArgs = .options.getDefault('native-compiler-args', '') to String
			if nativeArgs.length
				if nativeArgs.length > 2 and nativeArgs[0]=="'" and nativeArgs[nativeArgs.length-1]=="'"
					# on Windows, you should really use double quotes instead of single, but
					# we try to compensate here.
					nativeArgs = nativeArgs[1:-1]
				backEndOptions += ' ' + nativeArgs

			# to-do: framework and library references
			
			# source files
			sourceFileNameList = List<of String>()
			for module in _modules[1:]
				if module.objcFileName.length
					sourceFileNameList.add(module.objcFileName)

			# compilation command
			if _verbosity
				print 'Compiling to produce [outName]'

			# TODO: need to encapsulate this in CobraCore to avoid .NET dependency
			p = System.Diagnostics.Process()
			p.startInfo.fileName = compilerPath
			sourceFileNames = (for fileName in sourceFileNameList get '"' + fileName + '"').join(' ')
			p.startInfo.arguments = '[backEndOptions] [sourceFileNames]'
			if true or _verbosity >= 2  # to-do: remove 'true'
				print '[p.startInfo.fileName] [p.startInfo.arguments]'
			output = CobraCore.runAndCaptureAllOutput(p)
			# TODO: check p.exitCode, especially if output is empty
			_parseObjcCompilerOutput(output)

			if .errors.count
				_exitFromErrors

			_deleteIntermediateFiles

	def _parseObjcCompilerOutput(output as String)
		for line in output.split(c'\n')
			line = line.trim
			if not line.length, continue
			if ObjcCompilationMessage.willSkipMessage(line)
				continue
			else
				if _verbosity >= 3
					print 'objc message: [line]'
				_addMessage(ObjcCompilationMessage(line, this))


class ObjcCompilationMessage inherits SourceException  # to-do: break out to separate file and complete

	def willSkipMessage(line as String) as bool is shared
		return false
	
	cue init(line as String, compiler as Compiler)
		base.init(line)


##
## Node
##

class Node is partial

	def writeObjcDef(sw as CurlyWriter)
		require .didBindInt or .didBindImp
		pass


class SyntaxNode is partial

	def writeObjcDef(sw as CurlyWriter)
		base.writeSharpDef(sw)
		sw.node(this)


interface INamedNode is partial

	get objcName as String
		"""
		Return the name that should be used in Obj-C source code.
		"""


class NamedNode is partial

	get objcName as String
		return _name

	get objcRef as String
		return .sharpName


##
## Module
##

class Module is partial

	var _objcSource as String?
	var _objcFileName = ''

	get objcFileName from var

	get objcSource as String
		if _objcSource, return _objcSource
		if _objcFileName.length
			return File.readAllText(_objcFileName)
		else
			throw FallThroughException('No objc source or filename.')

	def writeObjcDef as Dictionary<of int, int>? is abstract

	def writeObjcTestInvocation(sw as CurlyWriter)
		pass  # to-do


class JavaModule is partial

	def writeObjcDef as Dictionary<of int, int>? is override
		assert false
		return nil


class SharpModule is partial

	def writeObjcDef as Dictionary<of int, int>? is override
		assert false
		return nil


class AssemblyModule is partial

	get objcSource as String is override
		return '(no objc source for [this])'

	def writeObjcDef as Dictionary<of int, int>? is override
		return nil


class CobraModule is partial

	get objcFileName as String is override
		if _objcFileName == '' and not _fileName.endsWith('SystemInterfaces.cobra')
			_objcFileName = _fileName + '.m'
		return _objcFileName

	def writeObjcDef as Dictionary<of int, int>? is override
		file = (.compiler to Compiler).createObjcFile(.objcFileName)
		using sw = CurlyWriter(file, CurlyLineNumberTreatment.PoundLine)
			.compiler.addIntermediateFile(_objcFileName)
			sw.start(.fileName)
			sw.write('// [_objcFileName]\n')
			sw.write('// Generated by Cobra\n')  # TODO: put version number here
			sw.write('// on [DateTime.now]\n')
			# TODO: list op sys
			sw.write('\n')

			# to-do: axe or change: sw.write('using CobraLangInternal = Cobra.Lang[.compiler.embedRunTimeSuffix];\n')
			
			.topNameSpace.writeObjcDef(sw)
			d = sw.curlyToCobraLineNum
		if false
			bar = '----------------------------------------------'
			print bar
			print file.toString
			print bar
		return d

	def writeObjcTestInvocation(sw as CurlyWriter) is override
		.topNameSpace.writeObjcTestInvocation(sw)


##
## Container and friends
##

interface IParentSpace is partial
	
	get objcRef as String


class Container<of TMember> is partial

	get objcInit as String is abstract

	get objcNameComponent as String
		"""
		Returns a string that can be used in a Obj-C identifier. That means it cannot have special symbols such as period or left bracket.
		"""
		ensure result.length > 0  # TODO? Move to interface
		return .objcRef

	var _objcRef as String?

	get objcRef as String is override
		if _objcRef is nil and .didBindImp
			_objcRef = _computeObjcRef
			return _objcRef to !
		else
			return _computeObjcRef

	get objcParamRef as String
		return .objcRef

	get _computeObjcRef as String
		if .parent
			s = .parent.objcRef
			if s.length and not s.endsWith('::')  # Obj-C has weird "global::" name  # to-do: not an obj-c thing
				s += '.'
			s += .objcName
		else
			s = .objcName
		return s

	def writeObjcIsNames(sw as CurlyWriter)
		# TODO: cache this somewhere
		accessLevels = ['public', 'protected', 'internal', 'protected internal', 'private']
		# CC: accessLevels = 'public,protected,internal,protected internal,private'.split(c',')
			# same names in both Cobra and Obj-C

		# TODO:
		# if isNames is nil
		#	isNames = _isNames
		isNames = List<of String>()
		isNames.addRange(_isNames)
		if .defaultAccessLevel.length
			found = false
			for level as String in accessLevels  # CC: axe as
				if level in isNames
					found = true
			if not found
				isNames.insert(0, .defaultAccessLevel)
		isNameCS = {
			# only have to specify the ones that are different
			'shared': 'static',
			'nonvirtual': '',
		}
		sep = ''
		for name in isNames
			name = Utils.getSS(isNameCS to passthrough, name, name) to !
			sw.write(sep)
			sw.write(name)
			sep = ' '
		if sep.length
			sw.write(' ')

	def writeObjcTestInvocation(sw as CurlyWriter)
		pass  # to-do


interface IMember is partial

	def writeObjcDef(sw as CurlyWriter)
		""" Write the Obj-C code for this member declaration to the given CurlyWriter. """

	def writeObjcTestInvocation(sw as CurlyWriter)
		""" Write the Obj-C call to the test method for this member. """


##
## Namespace
##

class NameSpace is partial

	get objcFullName as String
		value as Object?
		if not .addOnValues.tryGetValue('objcFullName', out value)
			fullName = .fullName
			if fullName == 'Cobra.Lang'
				name = 'Cobra.Lang' + .compiler.embedRunTimeSuffix
			else if fullName.startsWith('Cobra.Lang.')
				name = 'Cobra.Lang[.compiler.embedRunTimeSuffix].' + fullName['Cobra.Lang.'.length:]
			else
				name = fullName
			name = name.replace('.', '_x_')  # no real namespaces in ObjC
			.addOnValues['objcFullName'] = name
			return name
		else
			return value to String

	get objcInit as String is override  # TODO: remove when not a type
		assert false
		return ''

	get objcRef as String is override
		if _superNameSpace is nil
			return 'global::'
		else
			return .objcFullName

	get objcQualifier as String
		ensure result.endsWith('.') or result == 'global::'
		if _superNameSpace is nil
			return 'global::'
		else
			return .objcFullName + '.'
	
	def writeObjcDef(sw as CurlyWriter) is override
		assert not .isUnified
		base.writeObjcDef(sw)
		if not .isRoot
			suffix = if(.fullName == 'Cobra.Lang', .compiler.embedRunTimeSuffix, '')
			sw.writeAndIndent('namespace [.name][suffix] {\n\n')
		for ud in _useDirectives
			ud.writeObjcDef(sw)
		for decl in _declsInOrder
			if decl inherits Box
				.compiler.boxStack.push(decl)
			decl.writeObjcDef(sw)
			if decl inherits Box
				.compiler.boxStack.pop
		if not .isRoot
			sw.dedentAndWrite('} // namespace [.name]\n')

	def writeObjcTestInvocation(sw as CurlyWriter) is override
		for decl in _declsInOrder
			decl.writeObjcTestInvocation(sw)


class UseDirective is partial

	pass


##
## Types
##

class BasicLibraryType is partial

	get objcInit as String
		throw NoSourceGenerationException(this)

	get objcName as String
		throw NoSourceGenerationException(this)

	get objcNameComponent as String
		throw NoSourceGenerationException(this)

	get objcParamRef as String
		throw NoSourceGenerationException(this)

	get objcRef as String
		throw NoSourceGenerationException(this)

	def writeObjcDef(sw as CurlyWriter)
		throw NoSourceGenerationException(this)

	def writeObjcTestInvocation(sw as CurlyWriter)
		throw NoSourceGenerationException(this)


interface IType is partial

	get objcInit as String

	get objcNameComponent as String
		"""
		Returns a string that refers to this type and is suitable for embedding in a larger
		identifier (meaning there will be no punction, spaces or comments).
		"""

	get objcRef as String
		"""
		Returns a string that refers to this type.
		Examples: 'int'  'NSMutableArray'  'object'
		"""

	get objcParamRef as String
		"""
		Returns a string that refers to this type including any necessary parameter declaration
		specification such as C# 'params' or 'out'. Invoked by Param.writeObjcDef.  to-do
		"""


class CobraType is partial

	get objcInit as String is abstract

	get objcName as String
		return .name

	get objcNameComponent as String
		name = .name
		i = name.indexOf('/*')  # form: /*foo*/bar
		if i <> -1
			j = name.indexOf('*/', i)
			name = name[:i] + name[j+2:]
		name = name.replace('.', '_').replace('<', '_').replace('>', '_').replace(', ', '_')
		return name

	get objcRef as String
		return .objcName

	get objcParamRef as String
		return .objcRef

	def writeObjcTestInvocation(sw as CurlyWriter)
		pass


class BoolType is partial

	get objcInit as String is override
		return 'NO'


class CharType is partial

	get objcInit as String is override
		return '(char)0'


class DynamicType is partial

	get objcInit as String is override
		return 'nil'

	get objcName as String is override
		return 'id'


class FloatType is partial

	get objcName as String is override
		return _nativeType.fullName


class IntType is partial

	get objcName as String is override
		return _nativeType.fullName


class NilableType is partial

	get objcInit as String is override
		return 'null'

	get objcRef as String is override
		# to-do: how to handle nullable value types?
		return _wrappedType.objcRef + if(not _wrappedType.isReference, '?', '')


class NilType is partial

	get objcInit as String is override
		return 'nil'

	get objcRef as String is override
		return '/*nil*/id'


class AbstractNumberType is partial

	get objcInit as String is override
		return '0'


class PassThroughType is partial

	get objcInit as String is override
		return 'nil'

	get objcRef as String is override
		return '/*passthrough*/id'


class StreamType is partial

	get objcInit as String is override
		return 'new CobraLangInternal.EmptyStream<[.theWrappedType.objcRef]>()'  # to-do

	get objcRef as String is override
		assert .didBindInh and .didBindInt
		return '/*[.name]*/[.box.objcRef]'


class VoidType is partial

	get objcInit as String is override
		throw Exception('Cannot init a void type.')


class WrappedType is partial

	get objcInit as String is override
		return _wrappedType.objcInit


class ArrayType is partial

	get objcRef as String is override
		return '[_wrappedType.objcRef]' + r'[]'  # to-do?

	get objcInit as String is override
		return 'nil'


class VariType is partial

	get objcRef as String is override
		return '[_wrappedType.objcRef]' + r'[]'  # to-do

	get objcParamRef as String is override
		return 'params ' + .objcRef  # to-do


class UnspecifiedType is partial
	
	get objcInit as String is override
		# to-do: throw Exception('Not expecting code gen for unspecified types.')
		return '!UnspecifiedType!'


##
## Enums
##

class EnumDecl is partial

	def writeObjcTestInvocation(cw as CurlyWriter) is override
		pass

	get objcInit as String is override
		return ''


class EnumMember is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass


##
## Boxes
##


class Box is partial

	def writeObjcTestInvocation(cw as CurlyWriter) is override
		pass  # to-do


class ClassOrStruct is partial

	pass  # to-do


class Class is partial

	get objcInit as String is override
		return ''


class Interface is partial

	get objcInit as String is override
		return ''


class Mixin is partial

	pass  # to-do


class Struct is partial

	get objcInit as String is override
		return ''


class MethodSig is partial

	pass  # to-do


class GenericParam is partial

	get objcInit as String is override
		return ''


class GenericClassConstraint is partial

	pass  # to-do


class GenericStructConstraint is partial

	pass  # to-do


class GenericCallableConstraint is partial

	pass  # to-do


class GenericTypeConstraint is partial

	pass  # to-do


class Extension is partial

	get objcInit as String is override
		return ''


##
## Vars
##

interface IVar is partial

	pass  # to-do


class AbstractLocalVar is partial

	pass  # to-do


class Param is partial

	pass  # to-do


class LocalVar is partial

	pass  # to-do


class ResultVar is partial

	pass  # to-do


##
## Members
##


class BoxMember is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass  # to-do


class BoxEvent is partial

	pass  # to-do


class BoxConst is partial

	pass  # to-do


class BoxVar is partial

	pass  # to-do


class AbstractMethod is partial

	pass  # to-do


class Initializer is partial

	pass  # to-do
		

class Method is partial

	pass  # to-do


class ProperDexer is partial

	pass  # to-do


class ProperDexerXetter is partial

	pass  # to-do


class Property is partial

	pass  # to-do


class Indexer is partial

	pass  # to-do


class MemberOverload is partial

	pass  # to-do


class TestMethod is partial

	pass  # to-do


class ContractPart is partial

	pass  # to-do


class RequirePart is partial

	pass  # to-do


class EnsurePart is partial

	pass  # to-do


##
## Statements
##

class Stmt is partial

	pass  # to-do


class AssertStmt is partial

	pass  # to-do


class BranchStmt is partial

	pass  # to-do


class BlockStmt is partial

	pass  # to-do


class BreakStmt is partial

	pass  # to-do


class ContinueStmt is partial

	pass  # to-do


class ExpectStmt is partial

	pass  # to-do


class ForStmt is partial

	pass  # to-do
	

class OldForNumericStmt is partial

	pass  # to-do


class ForNumericStmt is partial

	pass  # to-do


class ForEnumerableStmt is partial

	pass  # to-do


class IfStmt is partial

	pass  # to-do


class ListenOrIgnoreStmt is partial

	pass  # to-do


class ListenStmt is partial

	pass  # to-do


class IgnoreStmt is partial

	pass  # to-do


class LockStmt is partial

	pass  # to-do


class PassStmt is partial

	pass  # to-do


class PrintStmt is partial

	pass  # to-do


class RaiseStmt is partial

	pass  # to-do


class ReturnStmt is partial

	pass  # to-do


class TraceStmt is partial

	pass  # to-do


class TraceLocationStmt is partial

	pass  # to-do


class TraceAllStmt is partial

	pass  # to-do


class TraceExprsStmt is partial

	pass  # to-do


class TryStmt is partial

	pass  # to-do


class CatchBlock is partial

	pass  # to-do


class ThrowStmt is partial

	pass  # to-do


class UsingStmt is partial

	pass  # to-do


class WhileStmt is partial

	pass  # to-do


class PostWhileStmt is partial

	pass  # to-do


class YieldStmt is partial

	pass  # to-do


class YieldBreakStmt is partial

	pass  # to-do


class YieldReturnStmt is partial

	pass  # to-do


class MultiTargetAssignStatement is partial

	pass  # to-do


##
## Expressions
##


class Expr is partial

	pass  # to-do


class NameExpr is partial

	pass  # to-do


class AsExpr is partial

	pass  # to-do


class AnonymousMethodExpr is partial

	pass  # to-do


class LambdaExpr is partial

	pass  # to-do


class CallExpr is partial

	pass  # to-do


class EnumCallExpr is partial

	pass  # to-do


class ForExpr is partial

	pass  # to-do


class IdentifierExpr is partial

	pass  # to-do


class IfExpr is partial

	pass  # to-do


class IndexExpr is partial

	pass  # to-do


class IsNilExpr is partial

	pass  # to-do


class IsNotNilExpr is partial

	pass  # to-do


class MemberExpr is partial

	pass  # to-do


class OldExpr is partial

	pass  # to-do


class PostCallExpr is partial

	pass  # to-do


class RefExpr is partial

	pass  # to-do


class SharpExpr is partial

	pass  # to-do


class SliceExpr is partial

	pass  # to-do


class TypeExpr is partial

	pass  # to-do


class AllOrAnyExpr is partial

	pass  # to-do


class UnaryOpExpr is partial

	pass  # to-do


class Literal is partial

	pass  # to-do


class AtomicLiteral is partial

	pass  # to-do


class BoolLit is partial

	pass  # to-do


class CharLit is partial

	pass  # to-do


class DecimalLit is partial

	pass  # to-do


class FractionalLit is partial

	pass  # to-do


class FloatLit is partial

	pass  # to-do


class IntegerLit is partial

	pass  # to-do


class NilLiteral is partial

	pass  # to-do


class StringLit is partial

	pass  # to-do


class StringSubstLit is partial

	pass  # to-do


class BaseLit is partial

	pass  # to-do


class ThisLit is partial

	pass  # to-do


class VarLit is partial

	pass  # to-do


class SequenceLit is partial

	pass  # to-do


class ListLit is partial

	pass  # to-do


class ArrayLit is partial

	pass  # to-do


class SetLit is partial

	pass  # to-do


class DictLit is partial

	pass  # to-do


class ToNilableOrNotExpr is partial

	pass  # to-do


class ToNilableExpr is partial

	pass  # to-do


class ToNonNilableExpr is partial

	pass  # to-do


##
## Binary Expressions
##

class BinaryOpExpr is partial

	pass  # to-do


class AssignExpr is partial

	pass  # to-do


class NumericPromoExpr is partial

	pass  # to-do


class AugAssignMathExpr is partial

	pass  # to-do


class AugAssignBitwiseExpr is partial

	pass  # to-do


class BinaryBoolExpr is partial

	pass  # to-do


class BinaryBitwiseExpr is partial

	pass  # to-do


class BinaryMathExpr is partial

	pass  # to-do


class CompareExpr is partial

	pass  # to-do


class ChainedCompareExpr is partial

	pass  # to-do


class DotExpr is partial

	pass  # to-do


class InExpr is partial

	pass  # to-do


class InheritsExpr is partial

	pass  # to-do


class ToExpr is partial

	pass  # to-do


class ToQExpr is partial

	pass  # to-do


class CoalesceExpr is partial

	pass  # to-do


class InverseCoalesceExpr is partial

	pass  # to-do


class CoalesceAssignExpr is partial

	pass  # to-do


class InverseCoalesceAssignExpr is partial

	pass  # to-do


##
## Attributes
##

class AttributeDecl is partial

	pass  # to-do


class AssemblyDecl is partial

	def writeObjcTestInvocation(cw as CurlyWriter)
		pass


##
## Misc items
##

class ObjcBackEndUtils

	shared

		# to-do: update these
		var _backEndKeyWordList = 'abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual void volatile while'.split

		var _backEndKeyWordSet = Set<of String>()

		def isBackEndKeyWord(word as String) as bool
			"""
			Returns true if the given word is a keyword in C# 2.0.
			"""
			require
				word.length
			test
				assert .isBackEndKeyWord('object')
				assert .isBackEndKeyWord('if')
				assert not .isBackEndKeyWord('total')
			body
				if _backEndKeyWordSet.count == 0
					for word in _backEndKeyWordList
						_backEndKeyWordSet.add(word)
				return word in _backEndKeyWordSet

		# to-do: use a different technique
		def backEndNameForLocalVarName(name as String) as String
			if .isBackEndKeyWord(name)
				return '@' + name  # C# supports @ as a prefix to escape identifiers
			else
				return name
