class EnumDecl
	inherits Container<of EnumMember>
	implements IBoxMember, INameSpaceMember

	# TODO: can an enum decl have attributes?
	# TODO: defaultAccessLevel = 'public'

	var _storageTypeNode as ITypeProxy?
	var _storageType as IType?
	var _clrType as Type?
	var _needScanClrType as bool

	def init(parent as IParentSpace?, token as IToken, name as String, isNames as List<of String>, storageTypeNode as ITypeProxy?, docString as String, enumMembers as List<of EnumMember>)
		base.init(parent, token, name, isNames, docString)
		_storageTypeNode = storageTypeNode
		for em in enumMembers
			.addDecl(em)
			em.enumDecl = this

	def init(parent as IParentSpace?, clrType as Type, isNames as List<of String>, docString as String?)
		base.init(parent, TokenFix.empty, clrType.name, isNames, docString)
		_clrType = clrType
		_storageTypeNode = ClrTypeProxy(Enum.getUnderlyingType(clrType))
		_needScanClrType = true
	
	def _scanClrType
		_needScanClrType = false
		clrType = _clrType to !
		isByte = Enum.getUnderlyingType(clrType).name == 'Byte'
		is64 = Enum.getUnderlyingType(clrType).name == 'Int64'
		values = Enum.getValues(clrType)
		i = 0
		for name in Enum.getNames(clrType)
			value = values.getValue(i)
			# CC: lameness follows
			if isByte
				intValue = int.parse($sharp('((byte)value).ToString()')) to int
			else if is64
				try
					intValue = int.parse($sharp('((Int64)value).ToString()')) to int
				catch OverflowException
					intValue = 999  # CC: omg. but probably doesn't affect anything. we're reading the DLL here, not creating one
			else
				intValue = value to int
			member = EnumMember(name, intValue)
			member.enumDecl = this
			.addDecl(member)
			i += 1

	get defaultAccessLevel as String is override
		return 'public'

	get englishName as String is override
		return 'enumeration type'

	get isShared as bool is override
		return true

	get isReference as bool is override
		# enums are not reference types
		return false

	get typeForIdentifier as IType is override
		return .compiler.typeType

	get typeForReceiver as IType is override
		return this

	def _bindInt is override
		base._bindInt
		if _storageTypeNode
			_storageType = _storageTypeNode.realType
			# TODO: give error if _storageType is not some kind of int or char or whatever is legal

	def _bindImp is override
		base._bindImp
		# TODO: can this be removed? since the storage type is always something primitive like 'int', there should be no need for enum to give it .bindImp
		if _storageType
			_storageType.bindImp

	def memberForName(name as String) as IMember?
		if _needScanClrType
			_scanClrType
		m = base.memberForName(name)
		if m is nil
			objClass = .compiler.libraryClass('System.Object')
			return objClass.memberForName(name)
		return m

	get sharpInit as String is override
		return .sharpRef + '.' + Utils.capped(_declsInOrder[0].name)

	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		if 'fake' in _isNames
			return
		.writeSharpIsNames(sw)
		sw.write('enum [_name]')
		storageType = _storageType
		if storageType and storageType is not .compiler.intType
			sw.write(' [storageType.sharpRef]')
		sw.write(' {\n')
		sw.indent
		sep = ''
		i = 0
		for em as EnumMember in .declsInOrder
			sw.write(sep)
			sw.write(Utils.capped(em.name))
			if em.value
				sw.write(' = [em.value]')
			i += 1
			sep = ',\n'
		sw.write('\n')
		sw.dedent
		sw.write('}\n\n')


class EnumMember
	inherits NamedNode
	implements IMember
	"""
	Holds the name and (optionally) value of a member of an EnumDecl.
	"""

	var _value as int?
	var _enumDecl as EnumDecl?

	def init(token as IToken, value as int?)
		require token.which=='ID'
		base.init(token, token.text)
		_value = value

	def init(name as String, value as int)
		base.init(name)
		_value = value

	def addMinFields is override
		base.addMinFields
		.addField('value', _value)

	pro enumDecl from var

	get isCallable as bool
		return false

	get isShared as bool
		return true

	get englishName as String
		return 'enumeration value'

	pro parentNameSpace as NameSpace?
		get
			return nil
		set
			throw NotSupportedException()

	get requiresThis as bool
		# This property probably doesn't make much sense for an enum member which must always
		# be accessed via its containg enum type.
		return false

	get resultType as IType
		require .enumDecl
		return _enumDecl to IType # CC: axe typecast

	get value from var

	def bindInh
		pass

	def unNilReturnType
		# TODO: can this be axed when IMember gets broken up?
		pass

	def writeSharpTestInvocation(sw as SharpWriter)
		pass

	get sharpRef as String is override
		return _enumDecl.sharpName + '.' + .sharpName
