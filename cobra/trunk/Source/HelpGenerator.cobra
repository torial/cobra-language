use System.Diagnostics
use System.Reflection


class HelpGenerator

	var settings = [
		['open',
			'Can be set to a boolean value (true, 1, false or 0) or set to the path of a program to execute on the help file.'],
		['directory',
			'The directory to put the HTML files in. Defaults to the current directory.'],
		['file name',
			'The template for the file name for the HTML files. Defaults to "Help_for_TOPIC.html".'],
		['max file name length',
			'The maximum file name length in case TOPIC gets too long. Defaults to 64.'],
		['show nodes',
			'If true, show the compiler nodes and their properties.'],
		['max node depth',
			'When showing nodes, the maximum node depth to traverse. Default is 2.'],
	]

	const defaultMaxFileNameLength = 64
	
	var _settingNames as ISet<of String>

	cue init(topic as String, node as ISyntaxNode, parentMember as IBoxMember?, parentType as IType?, types as IList<of IType>?)
		base.init
		_topic, _node = topic, node
		_parentMember, _parentType = parentMember, parentType
		_types = types ? List<of IType>()
		_settingNames = Set<of String>(for spec in .settings get spec[0])

	pro node from var as ISyntaxNode

	pro parentMember from var as IBoxMember?

	pro parentType from var as IType?
	
	pro types from var as IList<of IType>

	
	pro topic from var = ''
	
	pro path from var = ''

	def generate
		directory = .setting('directory', '.')
		fileName = .setting('file name', 'Help_for_TOPIC.html')
		fileName = .cleanFileName(fileName.replace('TOPIC', .topic))
		.path = .reducePath(Path.combine(directory, fileName))
		using tw = File.createText(.path)
			print to tw
				print '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
				print '<html xmlns="http://www.w3.org/1999/xhtml">'
				print '<head>'
				print '    <title>[.topic]</title>'
				print '    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />'
				.printStylesheet
				print '</head>'
				print '<body>'
				.printContent
				print '</body>'
				print '</html>'
		.open

	def cleanFileName(fileName as String) as String
		s = fileName
		for bad in ['\n', '\r', '\t', '\v']  # CC: '\a' '\f'
			s = s.replace(bad, ' ')
		while s.contains('  '), s = s.replace('  ', ' ')
		s = s.replace(' ', '_')
		for c in Path.getInvalidFileNameChars
			s = s.replace(c.toString, '')
		maxLen = .setting('max file name length', .defaultMaxFileNameLength)
		s = s[:maxLen]
		return s

	def reducePath(path as String) as String
		prefix = '.' + Path.directorySeparatorChar.toString
		if path.startsWith(prefix), path = path[prefix.length:]
		return path

	def printStylesheet
		print '<style type="text/css">'
		.embedStyleSheet('styles-cobra-help')
		print '</style>'
	
	def embedStyleSheet(name as String)
		fileName = name + '.css'
		dirs = [
			Path.getDirectoryName(Assembly.getEntryAssembly.location),
		]
		for dir in dirs
			if Directory.exists(dir)
				path = Path.combine(dir, fileName)
				if File.exists(path)
					print File.readAllText(path)
					continue
	
	def printContent
		.printHeader
		.printInfo
		.printLocation
		.printSearchLinks
		.printNode
		.printSettings
		.printFooter

	def printHeader
		sep = ' &nbsp;|&nbsp; '
		print '<div class="header">'
		print '<div class="title">'
		print 'Help for [.topic.htmlEncode]'
		print '</div>'
		print '<div class="cobra">'
		print '<a href="http://cobra-language.com/">The Cobra Programming Language</a>'
		print '[sep]<a href="http://cobra-language.com/support">Support</a>'
		print '[sep]<a href="http://cobra-language.com/discuss">Discuss</a>'
		print '[sep]<a href="http://cobra-language.com/wiki">Wiki</a>'
		print '</div>'
		print '</div>'

	def printInfo
		.heading('Info')

		print '<table>'

		print '<tr> <td class="k"> help for </td> <td class="v"> [.topic.htmlEncode] </td> </tr>'
		.parentNameSpaceRow(.node)

		defi as INamedNode?
		try
			defi = (.node to dynamic).definition
		catch
			pass
		if defi
			print '<tr> <td class="k"> definition </td> <td class="v"> [defi.idString.htmlEncode] </td> </tr>'
			.parentNameSpaceRow(defi)

		type as INamedNode?
		try
			type = (.node to dynamic).type
		catch
			pass
		if type
			print '<tr> <td class="k"> type </td> <td class="v"> [type.name.htmlEncode] </td> </tr>'
			.parentNameSpaceRow(type)

		print '</table>'

	def parentNameSpaceRow(node)
		ns as NameSpace?
		try
			ns = node.parentNameSpace
		catch
			pass
		if ns
			print '<tr> <td class="k"> in namespace </td> <td class="v"> [ns.fullName.htmlEncode] </td> </tr>'

	def printLocation
		.heading('Location')
		print '<table>'

		if .parentMember
			what = if(.parentMember inherits AbstractMethod, 'method', 'member')
			print '<tr> <td class="k"> in [what] </td> <td class="v"> [.parentMember.name.htmlEncode] </td> </tr>'
		
		if .parentType
			print '<tr> <td class="k"> in [.parentType.englishName] </td> <td class="v"> [.parentType.name] </td> </tr>'
		
		print '<tr> <td class="k"> in file </td> <td class="v"> [.node.token.fileName.htmlEncode] </td> </tr>'
		
		print '<tr> <td class="k"> at line </td> <td class="v"> [.node.token.lineNum] </td> </tr>'
		
		print '</table>'

	def printSearchLinks
		# to-do: String.length  <.left.type>.<method>
		pass

	def printNode
		if .setting('show nodes', '0').toLower in ['1', 'true']
			.heading('Nodes')
			_printNode('@help', .node, Set<of INode>(), 1, .setting('max node depth', 2))

	def _printNode(source as String, node as INode, visited as Set<of INode>, depth as int, maxDepth as int)
		if node in visited or depth > maxDepth, return
		nodes = .printProperties(source, node)
		visited.add(node)
		depth += 1
		for name as String, subNode as INode in nodes
			if subNode not in visited
				source = '[name.htmlEncode] of [.descriptionFor(node)]'
				_printNode(source, subNode, visited, depth, maxDepth)

	def printProperties(source as String, obj) as List<of dynamic>
		nodes = List<of dynamic>()
		props = obj.typeOf.getProperties.toList
		props.sort(do(a as PropertyInfo, b as PropertyInfo)=a.name.compareTo(b.name))
		print '<table>'
		print '<tr> <td class="heading" colspan="2">[.descriptionFor(obj)]</td> </tr>'
		print '<tr> <td class="source" colspan="2">from [source]</td> </tr>'
		i = 0
		for prop in props
			if prop.canRead
				name = Utils.cobraNameForSharpMemberName(prop.name)
				try
					value = prop.getValue(obj, nil)
				catch exc as Exception
					value = '(exception: [exc.typeOf.name]: [exc.message])'
				if value implements INode, nodes.add([name, value])
				value = CobraCore.toTechString(value).htmlEncode
				print '<tr class="r[i]"> <td class="k"> [name] </td> <td class="v"> [value] </td> </tr>'
				i = (i + 1) % 2
		print '</table>'
		return nodes

	def descriptionFor(obj as INode) as String
		if obj inherits IExpr
			return '[obj.toCobraSource.htmlEncode] / [obj.idString.htmlEncode]'
		else
			return obj.idString.htmlEncode

	def printSettings
		.heading('Environment Variables')
		.p('You can use the following environment variables to control @help\'s behavior.')
		print '<table>'
		i = 0
		for name, description in .settings
			name, description = .envVarName(name).htmlEncode, description.htmlEncode
			print '<tr class="r[i]"> <td class="k"> [name] </td> <td class="v"> [description] </td> </tr>'
			i = (i + 1) % 2
		print '</table>'

	def printFooter
		print '<div class="footer"></div>'

	def setting(name as String, defaultValue as String) as String
		"""
		Return a setting from the environment variables,
		returning `defaultValue` if no env var is set.
		"""
		assert name in _settingNames
		envVarName = .envVarName(name)
		value = Environment.getEnvironmentVariable(envVarName) ? ''
		value = value.trim
		if value == '', value = defaultValue
		return value

	def setting(name as String, defaultValue as int) as int
		# to-do: is this needed?
		return int.parse(.setting(name, defaultValue.toString))

	def envVarName(settingName as String) as String
		return 'COBRA_HELP_' + settingName.toUpper.replace(' ', '_')

	def htmlEncode(obj as Object) as String
		return CobraCore.htmlEncode(obj)

	def htmlEncode(s as String) as String
		return CobraCore.htmlEncode(s)

	def heading(name as String)
		print '<div class="heading">[name.htmlEncode]</div>'

	def p(html as String)
		print '<p>' + html + '</p>'

	def open
		open = .setting('open', '1').trim
		if open.toLower in ['false', '0']
			pass
		else, if open.toLower in ['true', '1']
			Process.start(.path)
		else
			Process.start(open, .path)


extend String

	def htmlEncode as String
		return CobraCore.htmlEncode(this)
