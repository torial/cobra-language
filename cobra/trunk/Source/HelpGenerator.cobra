use System.Diagnostics
use System.Reflection
use System.Text.RegularExpressions


class HelpGenerator
	"""
	to-do: show doc strings

	to-do: show contracts
	
	to-do: show unit tests?
	
	to-do: pick up .NET XML doc file for a given DLL

	to-do: sorting should be case insensitive
	"""
	
	var settings = [
		['member separator',
			'The HTML to put between type members. Defaults to <br />.'],
		['directory',
			'The directory to put the HTML files in. Defaults to the current directory.'],
		['file name',
			'The template for the file name for the HTML files. Defaults to "Help_for_TOPIC.html".'],
		['max file name length',
			'The maximum file name length in case TOPIC gets too long. Defaults to 64.'],
		['open',
			'Can be set to a boolean value (true, 1, false or 0) or set to the path of a program to execute on the help file.'],
		['show nodes',
			'If true, show the compiler nodes and their properties.'],
		['max node depth',
			'When showing nodes, the maximum node depth to traverse. Default is 2.'],
	]

	var searchSites = [
		{
			'name': 'Google',
			'url': 'http://www.google.com/search?q=',
			'helpers': ['Cobra', '.NET', 'C#'],
		},
		{
			'name': 'Cobra Language',
			'host': 'cobra-language.com',
		},
		{
			'name': 'MSDN',
			'host': 'msdn.microsoft.com',
		},
		{
			'name': 'Stack Overflow',
			'host': 'stackoverflow.com',
			'helpers': ['.NET', 'C#'],
		},
	]

	var searchEngine = 'Google'  # should match a searchSites above that has a 'url'

	const defaultMaxFileNameLength = 64
	
	var _testMethodRE = Regex(r'^test_[\w]+_\d+$', RegexOptions.Compiled)

	var _settingNames as Cobra.Lang.ISet<of String>

	var _nextSerialNum = 1

	cue init(topic as String, node as ISyntaxNode, parentMember as IBoxMember?, parentType as IType?)
		base.init
		_topic, _node = topic, node
		_parentMember, _parentType = parentMember, parentType
		_settingNames = Set<of String>(for spec in .settings get spec[0])

	pro node from var as ISyntaxNode

	pro parentMember from var as IBoxMember?

	pro parentType from var as IType?
	
	pro types from var = List<of IType>()

	pro searchTerms from var = List<of String>()
	
	
	pro topic from var = ''
	
	pro path from var = ''

	def generate
		.reduceSearchTerms
		.reduceTypes
		directory = .setting('directory', '.')
		fileName = .setting('file name', 'Help_for_TOPIC.html')
		fileName = .cleanFileName(fileName.replace('TOPIC', .topic))
		.path = .reducePath(Path.combine(directory, fileName))
		using tw = File.createText(.path)
			print to tw
				print '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
				print '<html xmlns="http://www.w3.org/1999/xhtml">'
				print '<head>'
				print '    <title>[.topic]</title>'
				print '    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />'
				.printStylesheet
				.embedFile('WebAssets[Path.directorySeparatorChar]help.js')
				print '</head>'
				print '<body>'
				.printContent
				print '</body>'
				print '</html>'
		.open

	def reduceSearchTerms
		""" Get rid of duplicate search terms, trailing whitespace, etc. """
		result = List<of String>()
		visited = Set<of String>()
		for term in .searchTerms
			term = term.trim
			while term.contains('  '), term = term.replace('  ', ' ')
			if term.toLower not in visited
				visited.add(term.toLower)
				result.add(term)
		.searchTerms = result

	def reduceTypes
		result = List<of IType>()
		for type in .types, if type not in result, result.add(type)
		.types = result

	def cleanFileName(fileName as String) as String
		s = fileName
		for bad in ['\n', '\r', '\t', '\v']  # CC: '\a' '\f'
			s = s.replace(bad, ' ')
		while s.contains('  '), s = s.replace('  ', ' ')
		s = s.replace(' ', '_')
		for c in Path.getInvalidFileNameChars
			s = s.replace(c.toString, '')
		maxLen = .setting('max file name length', .defaultMaxFileNameLength)
		s = s[:maxLen]
		return s

	def reducePath(path as String) as String
		prefix = '.' + Path.directorySeparatorChar.toString
		if path.startsWith(prefix), path = path[prefix.length:]
		return path

	def printStylesheet
		print '<style type="text/css">'
		.embedFile('styles-cobra-help.css')
		print '</style>'
	
	def embedFile(fileName as String)
		dirs = [
			Path.getDirectoryName(Assembly.getEntryAssembly.location),
		]
		for dir in dirs
			if Directory.exists(dir)
				path = Path.combine(dir, fileName)
				if File.exists(path)
					print File.readAllText(path)
					continue
	
	def printContent
		.printHeader
		print '<div class="content">'
		.printLocation
		.printInfo
		print '<div class="clear"></div>'
		.printSearchLinks
		.printTypes
		.printNode
		.printSettings
		print '</div>'
		.printFooter

	def printHeader
		sep = ' &nbsp;|&nbsp; '
		print '<div class="header">'
		print '<div class="title">'
		print 'Help for [.topic.htmlEncode]'
		print '</div>'
		print '<div class="cobra">'
		print '<a href="http://cobra-language.com/">The Cobra Programming Language</a>'
		print '[sep]<a href="http://cobra-language.com/support">Support</a>'
		print '[sep]<a href="http://cobra-language.com/discuss">Discuss</a>'
		print '[sep]<a href="http://cobra-language.com/wiki">Wiki</a>'
		print '</div>'
		print '</div>'

	def printLocation
		print '<div class="left">'
		.heading('Location')
		print '<table>'

		if .parentMember
			what = if(.parentMember inherits AbstractMethod, 'method', 'member')
			print '<tr> <td class="k"> in [what] </td> <td class="v"> [.parentMember.name.htmlEncode] </td> </tr>'
		
		if .parentType
			print '<tr> <td class="k"> in [.parentType.englishName] </td> <td class="v"> [.parentType.name] </td> </tr>'
		
		print '<tr> <td class="k"> in file </td> <td class="v"> [.node.token.fileName.htmlEncode] </td> </tr>'
		
		print '<tr> <td class="k"> at line </td> <td class="v"> [.node.token.lineNum] </td> </tr>'
		
		print '</table>'
		print '</div>'

	def printInfo
		print '<div class="left">'
		.heading('Info')

		print '<table>'

		print '<tr> <td class="k"> help for </td> <td class="v"> [.topic.htmlEncode] </td> </tr>'
		.parentNameSpaceRow(.node)

		# to-do: maybe the following should be refactored so that nodes augment the info
		#        like what is done with .searchTerms and .types

		type as INamedNode?
		try
			type = (.node to dynamic).type
		catch
			pass
		if type
			print '<tr> <td class="k"> expression type </td> <td class="v"> [type.name.htmlEncode] </td> </tr>'
			.parentNameSpaceRow(type)

		if .node inherits DotExpr
			type = nil
			try
				type = (.node to dynamic).left.receiverType
			catch
				pass
			if type
				print '<tr> <td class="k"> receiver type </td> <td class="v"> [type.name.htmlEncode] </td> </tr>'
				.parentNameSpaceRow(type)
			
		defi = nil
		try
			defi = (.node to dynamic).definition
		catch
			pass
		if defi
			try
				value = defi.cobraSourceSignature
			catch
				value = defi.idString
			print '<tr> <td class="k"> definition </td> <td class="v"> [value.toString.htmlEncode] </td> </tr>'
			.parentNameSpaceRow(defi)

		print '</table>'
		print '</div>'

	def parentNameSpaceRow(node)
		ns as NameSpace?
		try
			ns = node.parentNameSpace
		catch
			pass
		if ns and not ns.isRoot
			print '<tr> <td class="k"> in namespace </td> <td class="v"> [ns.fullName.htmlEncode] </td> </tr>'

	def printSearchLinks
		if .searchTerms.count == 0, return
		.heading('Search')

		# extract the basic searchUrl
		searchUrls = for site in .searchSites where site['name'] == .searchEngine get site['url']
		assert searchUrls.count == 1
		searchUrl = searchUrls[0]
		
		print '<div class="search-container">'
		print '    <div id="sources" class="search-sources">'
		first = true
		for site in .searchSites
			current = if(first, 'class="current" ', '')
			name = site['name'] to String
			rel = _siteId(name)
			print '        <a [current]rel="[rel]" href="#">[name.htmlEncode]</a>'
			first = false
		print '    </div>'

		print '<div id="queries" class="search-queries">'
		first = true
		for site in .searchSites
			id = _siteId(site['name'])
			style = if(first, '', ' style="display: none"')
			print '<table id="[id]" class="query-category"[style]>'
			if site.containsKey('url'), url = site['url']
			else, url = searchUrl + 'site:[site["host"]]+'
			for keywords in .searchTerms
				print '<tr>'
				keywordsForUrl = keywords.replace(' ', '+').urlEncode
				print '<td><a href="[url][keywordsForUrl]">[keywords.htmlEncode]</a></td>'
				if site.containsKey('helpers')
					for helper as String in site['helpers']
						helperForUrl = helper.replace(' ', '+').urlEncode
						print '<td><a href="[url][keywords]+[helperForUrl]">+ [helper.htmlEncode]</a></td>'
				print '</tr>'
			print '</table>'
			first = false
		print '</div>'
		print '</div>'

	def _siteId(siteName as String) as String
		return siteName.toLower.replace(' ', '-') + '-queries'

	def printTypes
		i = 0
		while i < .types.count  # .types can grow while looping
			_printType(.types[i])
			i += 1

	def _printType(type as IType)
		type = type.nonNil
		.heading('[type.englishName] [type.name]')
		print '<table>'
		# types: primitive, box [ class, struct, interface ], enum, mixin, extension
		if type inherits Box
			_printBoxPairs(type)
		else if type inherits PrimitiveType
			if type.box, _printBoxPairs(type.box to !)
		else if type inherits EnumDecl
			_printEnumDetails(type)
		# to-do: show interface as given by DocGenerator. ... is that still needed?
		print '</table>'
	
	def _printBoxPairs(box as Box)
		if box.baseClass
			.pair('base class', box.baseClass.name)
		if box.baseInterfaces.count
			.pair('base interfaces', (for i in box.baseInterfaces get i.name).sorted.join(', '))
		if box.parentNameSpace
			.pair('parent name space', box.parentNameSpace.fullName)
		if box.innerType
			.pair('for loop type', box.innerType.name)
			.types.add(box.innerType)
		if box.isGeneric
			for gp in box.genericParams
				if gp inherits GenericParam
					# to-do: show generic constraints
					pass
				else if gp not in .types
					.types.add(gp)

		# to-do: invariants
		# to-do: attributes		
		
		# members: public vs. non, static vs. instance, member type
		members = box.allMembers.sorted(do(a as IBoxMember, b as IBoxMember)=a.name.compareTo(b.name))
		members = for member in members where not member inherits TestMethod
		members = for member in members where not _testMethodRE.isMatch(member.name)

		# to-do: constructors
		memberKindNames = ['constants', 'variables', 'events', 'properties', 'indexers', 'methods']
		for visibility in 0 : 2    # public, non-public
			for level in 0 : 2     # shared, instance
				for kind in 0 : 6  # member type
					matches = List<of IBoxMember>()
					for member in members
						if member inherits Box
							# to-do: nested types
							continue
#							if visibility == 0 and not 'public' in member.isNames, continue
#							if member.isFromBinaryLibrary and 'private' in member.isNames, continue
						else if member inherits BoxMember
							branch kind
								on 0, if not member inherits BoxConst, continue
								on 1, if not member inherits BoxVar, continue
								on 2, if not member inherits BoxEvent, continue
								on 3, if not member inherits Property, continue
								on 4, if not member inherits Indexer, continue
								on 5, if not member inherits Method, continue
							if visibility == 0 and not member.isPublic, continue
							if visibility == 1 and member.isPublic, continue
							if member.isPrivate and member.parentBox.isFromBinaryLibrary, continue
							if level == 0 and not member.isShared, continue
							if level == 1 and member.isShared, continue
						else
							throw FallThroughException(member)
						matches.add(member)
					if matches.count
						category = ['public', 'non-public'][visibility]
						category += ' ' + ['shared', 'instance'][level]
						category += ' ' + memberKindNames[kind]
						print '<tr>'
						print '<td class="k"> [category] </td>'
						print '<td class="v">'
						for match in matches, _printBoxMember(match)
						print '</td>'
						print '</tr>'

	def _printBoxMember(m as IBoxMember)
		print '<span class="box-pair-member">'
		matchId = _boxMemberId(m)
		print '<a id="link-[matchId]" href="#" rel="[matchId]" class="box-pair-link">'
		print _boxMemberName(m)
		print '</a>'
		print '</span>'
		print .setting('member separator', '<br />')
		print '<div id="[matchId]" class="popup text">'
		try
			signature = (m to dynamic).cobraSourceSignature to String
		catch
			signature = m.name
		print '<div class="signature">[signature.htmlEncode]</div>'
		print '<div class="docs">'
		# to-do: doc string
		print '</div>'
		print '</div>'

	def _boxMemberId(member as IBoxMember) as String
		_nextSerialNum += 1
		return 'member-[_nextSerialNum-1]'

	def _boxMemberName(member as IBoxMember) as String
		if member inherits BoxMember
			name = StringBuilder()
			if member inherits Indexer
				name.append('\[')
				print '<span class="box-pair-paramlist">' stop
				sep = ''
				for param in member.params
					name.append(sep)
					name.append('<span class="box-pair-param">[param.name.htmlEncode]</span>')
					sep = ', '
				print '</span>' stop
				name.append(']')
			else
				name.append('.' + member.name.htmlEncode)
				if member inherits Method
					if member.params.count > 0
						name.append('(')
						print '<span class="box-pair-paramlist">' stop						
						sep = ''
						for param in member.params
							name.append(sep)
							name.append('<span class="box-pair-param">[param.name.htmlEncode]</span>')
							sep = ', '
						print '</span>' stop
						name.append(')')
			return name.toString
		else
			return member.name.htmlEncode

	def _printEnumDetails(type as EnumDecl)
		for decl in type.declsInOrder
			.pair(decl.name, '')

	def pair(key, value)
		if not key inherits Html, key = .htmlEncode(key)
		if not value inherits Html, value = .htmlEncode(value)
		print '<tr>'
		print '<td class="k">[key]</td>'
		print '<td class="v">[value]</td>'
		print '</tr>'

	def printNode
		if .setting('show nodes', '0').toLower in ['1', 'true']
			.heading('Nodes')
			_printNode('@help', .node, Set<of INode>(), 1, .setting('max node depth', 2))

	def _printNode(source as String, node as INode, visited as Set<of INode>, depth as int, maxDepth as int)
		if node in visited or depth > maxDepth, return
		nodes = .printObject(source, node)
		visited.add(node)
		depth += 1
		for name as String, subNode as INode in nodes
			if subNode not in visited
				source = '[name.htmlEncode] of [.descriptionFor(node)]'
				_printNode(source, subNode, visited, depth, maxDepth)

	def printObject(source as String, obj) as List<of dynamic>
		nodes = List<of dynamic>()
		props = obj.typeOf.getProperties.toList
		props.sort(do(a as PropertyInfo, b as PropertyInfo)=a.name.compareTo(b.name))
		print '<table class="object">'
		print '<tr> <td class="heading" colspan="2">[.descriptionFor(obj)]</td> </tr>'
		print '<tr> <td class="source" colspan="2">from [source]</td> </tr>'
		i = 0
		for prop in props
			if prop.canRead
				name = Utils.cobraNameForNativeMemberName(prop.name)
				try
					value = prop.getValue(obj, nil)
				catch exc as Exception
					value = '(exception: [exc.typeOf.name]: [exc.message])'
				if value implements INode, nodes.add([name, value])
				value = CobraCore.toTechString(value).htmlEncode
				print '<tr class="r[i]"> <td class="k"> [name] </td> <td class="v"> [value] </td> </tr>'
				i = (i + 1) % 2
		print '</table>'
		return nodes

	def descriptionFor(obj as INode) as String
		if obj inherits IExpr
			return '[obj.toCobraSource.htmlEncode] / [obj.idString.htmlEncode]'
		else
			return obj.idString.htmlEncode

	def printSettings
		.heading('Environment Variables')
		.p('You can use the following environment variables to control @help\'s behavior.')
		print '<table>'
		i = 0
		for name, description in .settings
			name, description = .envVarName(name).htmlEncode, description.htmlEncode
			print '<tr class="r[i]"> <td class="k"> [name] </td> <td class="v"> [description] </td> </tr>'
			i = (i + 1) % 2
		print '</table>'

	def printFooter
		print '<div class="footer"></div>'

	def setting(name as String, defaultValue as String) as String
		"""
		Return a setting from the environment variables,
		returning `defaultValue` if no env var is set.
		"""
		assert name in _settingNames
		envVarName = .envVarName(name)
		value = Environment.getEnvironmentVariable(envVarName) ? ''
		value = value.trim
		if value == '', value = defaultValue
		return value

	def setting(name as String, defaultValue as int) as int
		return int.parse(.setting(name, defaultValue.toString))

	def envVarName(settingName as String) as String
		return 'COBRA_HELP_' + settingName.toUpper.replace(' ', '_')

	def htmlEncode(obj as Object) as String
		return CobraCore.htmlEncode(obj)

	def htmlEncode(s as String) as String
		return CobraCore.htmlEncode(s)

	def heading(name as String)
		print '<div class="heading">[name.htmlEncode]</div>'

	def p(html as String)
		print '<p>' + html + '</p>'

	def open
		open = .setting('open', '1').trim
		if open.toLower in ['false', '0']
			pass
		else, if open.toLower in ['true', '1']
			Process.start(.path)
		else
			Process.start(open, .path)


extend String

	def htmlEncode as String
		return CobraCore.htmlEncode(this)

	def urlEncode as String  # to-do
		return .replace('#', '%23').replace(' ', '+')
		
