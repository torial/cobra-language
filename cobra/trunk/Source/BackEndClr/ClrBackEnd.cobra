use System.Reflection


class ClrBackEnd inherits BackEnd

	cue init(compiler as Compiler)
		base.init(compiler)

	def makePhases(phases as IList<of Phase>) is override
		phases.add(GenerateSharpCodePhase(.compiler))
		phases.add(CompileSharpCodePhase(.compiler))

	def computeOutName as String is override
		return .compiler.computeOutNameSharp
		

class GenerateSharpCodePhase inherits Phase

	cue init(c as Compiler)
		base.init(c)

	get description as String is override
		return 'Generating C# code'

	def innerRun is override
		c = .compiler
		v = c.verbosity
		
		nativeCompiler = c.options.getDefault('native-compiler', '') to String
		if nativeCompiler == 'auto'
			if CobraCore.isRunningOnMono
				nativeCompiler = 'provider'
				entryAssemblyDir = Path.getDirectoryName(Assembly.getEntryAssembly.location)
				for candidateDllName in _candidateDllNames
					cobraSharp = Path.combine(entryAssemblyDir, candidateDllName)
					if File.exists(cobraSharp)
						if v >= 2, print '-native-compiler:auto ... Found [cobraSharp]'
						nativeCompiler = cobraSharp
						break
			else
				if v >= 2, print '-native-compiler:auto ... Not running on Mono'
				nativeCompiler = 'provider'
		c.nativeCompiler = nativeCompiler
		c.willWriteSharpToDisk = not nativeCompiler.endsWith('.dll')  # only Cobra.Sharp.dll will take in-memory source code

		c.writeSharp  # extension method
		if c.willWriteTestInvocation
			c.writeSharpTestInvocation


	def _candidateDllNames as String* is private
		# .monoVersionString could be '2.6.7' or 'Cobra.Sharp.2_8 (tarball Mon Oct 11 00:24:15 PDT 2010).dll'
		monoVer = CobraCore.monoVersionString.split(c' ')[0].trim
		if '.' in monoVer
			parts = monoVer.split(c'.')
			if parts.length >= 2
				ver = parts[0] + '_' + parts[1]  # ex: '2.4', '2.6', '2.7'
				name = 'Cobra.Sharp.' + ver + '.dll'
				yield name
		yield 'Cobra.Sharp.dll'


class CompileSharpCodePhase inherits Phase

	cue init(c as Compiler)
		base.init(c)

	get description as String is override
		return 'Compiling C# code'

	def innerRun is override
		.compiler.compileSharp
