class ClrBackEnd inherits BackEnd

	cue init(compiler as Compiler)
		base.init(compiler)

	def makePhases(phases as IList<of Phase>) is override
		phases.add(GenerateSharpCodePhase(.compiler))
		phases.add(CompileSharpCodePhase(.compiler))


class GenerateSharpCodePhase inherits Phase

	cue init(c as Compiler)
		base.init(c)

	get description as String is override
		return 'Generating C# code'

	def innerRun is override
		c = .compiler
		c.writeSharp  # extension method
		if c.willWriteTestInvocation
			c.writeSharpTestInvocation


class CompileSharpCodePhase inherits Phase

	cue init(c as Compiler)
		base.init(c)

	get description as String is override
		return 'Compiling C# code'

	def innerRun is override
		c = .compiler
		if c.willWriteTestInvocation
			c.compileSharp('/main:RunTests')  # TODO
		else
			c.compileSharp
