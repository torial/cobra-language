class Utils

	shared

		def combinePaths(a as String, b as String) as String
			"""
			Same as Path.combine() but leaves no '\.\' or '/./' in the result.
			"""
			p = Path.combine(a, b)
			good = Path.directorySeparatorChar.toString
			bad = '[good].[good]'
			p = p.replace(bad, good)
			return p

		def normalizePath(path as String) as String
			# TODO: this needs cleanup
			while path.startsWith('.\\')
				path = path.substring(2)
			while path.startsWith('./')
				path = path.substring(2)
			return path

		def plural(items as System.Collections.ICollection) as String
			ensure
				result == '' or result == 's'
			test
				assert Utils.plural([]) == 's'
				assert Utils.plural([2]) == ''
				assert Utils.plural([2, 2]) == 's'
			body
				return if(items.count==1, '', 's')

		def pluralize(name as String) as String
			# Could be made more sophisitcated in the future
			return name + 's'

		def capped(s as String) as String
			"""
			Returns the string with the first character capitalized.
			Returns a blank string for a blank string.
			"""
			ensure
				result.length == s.length
				result.length implies result[0] == result[0].toUpper
			test
				assert Utils.capped('chuck')=='Chuck'
				assert Utils.capped('Chuck')=='Chuck'
				assert Utils.capped('')==''
				assert Utils.capped(' foo')==' foo'
				assert Utils.capped('f')=='F'
				assert Utils.capped('1aoeu')=='1aoeu'
			body
				if s.length==0
					return s
				return s[0:1].toUpper + s[1:]

		def isCapped(s as String) as bool
			test
				assert Utils.isCapped('Aoeu')
				assert Utils.isCapped('Zaoeu')
				assert not Utils.isCapped('aoeu')
				assert not Utils.isCapped('')
				assert not Utils.isCapped('1234')
			body
				return s.length and s[0].isUpper

		def startsWithLowerLetter(s as String) as bool
			require
				s.length
			test
				assert Utils.startsWithLowerLetter('a')
				assert Utils.startsWithLowerLetter('z')
				assert not Utils.startsWithLowerLetter('A')
				assert not Utils.startsWithLowerLetter('1')
				assert not Utils.startsWithLowerLetter('_')
			body
				return s[0].isLower

		def startsNonLower(s as String) as bool
			require
				s.length
			test
				assert not Utils.startsNonLower('a')
				assert not Utils.startsNonLower('z')
				assert not Utils.startsNonLower('1')
				assert Utils.startsNonLower('A')
			body
				return s[0] <> s[0].toLower

		def toIdentifier(s as String) as String
			test
				cases = [
					['', ''],
					['aoeu', 'aoeu'],
					[' aoeu', '_aoeu'],
					['aoeu/aoeu', 'aoeu_aoeu'],
				]
				for case in cases
					assert Utils.toIdentifier(case[0]) == case[1]
			body
				sb = StringBuilder()
				for c in s
					if c.isLetterOrDigit or c == c'_'
						sb.append(c)
					else
						sb.append(c'_')
				return sb.toString

		# TODO: count should be a CobraCore util method
		# TODO: count should be an extension method of String
		def countChars(s as String, c as char) as int
			test
				assert Utils.countChars('', c'x')==0
				assert Utils.countChars('x', c'x')==1
				assert Utils.countChars('X', c'x')==0  # case sensitive
				assert Utils.countChars(' ! ! ', c'!')==2
			body
				count = 0
				for ch in s
					if c==ch
						count += 1
				return count

		# CC: the getXX() methods should be one generic method

		def getSB(d as Dictionary<of String, dynamic>, key as String, defaultValue as bool) as bool
			if d.containsKey(key)
				return d[key]
			else
				return defaultValue

		def getSI(d as Dictionary<of String, int>, key as String, defaultValue as int) as int
			if d.containsKey(key)
				return d[key]
			else
				return defaultValue

		def getSS(d as Dictionary<of String, String?>, key as String, defaultValue as String?) as String?
			if d.containsKey(key)
				return d[key]
			else
				return defaultValue

		def getSO(d as Dictionary<of String, Object>, key as String, defaultValue as Object?) as Object?
			if d.containsKey(key)
				return d[key]
			else
				return defaultValue

		# CC: make join an extension method of String which already has a join() except that it only works on arrays of strings
		def join(sep as String, parts as System.Collections.IEnumerable) as String  # TODO: given that this seems necessary, should Cobra add "use System.Collections" to all programs?
			test
				assert Utils.join('.', ['a', 'b'])=='a.b'
			body
				sb = StringBuilder()
				s = ''
				for part in parts
					sb.append(s)
					sb.append(part.toString)
					s = sep
				return sb.toString

		def join(sep as String, parts as vari String) as String  # CC: shouldn't need this because vari should implement IEnumerable
			return .join(sep, parts to System.Collections.IEnumerable)


		## C#
		
		def cobraNameForSharpMemberName(name as String) as String
			require
				name.length
			ensure
				not result[0].isUpper
			test
				cases = [
					'Foo foo',
					'FooBar fooBar',
					'PI pi',
					'OSVersion osVersion',
					'XMLParser xmlParser',
					'foo foo',
					'fooBar fooBar',
					'_foo _foo',
					'_fooBar _fooBar',
					'_Foo _Foo',
					'_FooBar _FooBar',
					'_ _',
					'UTF8 utf8',
				]
				for case in cases
					parts = case.split
					assert Utils.cobraNameForSharpMemberName(parts[0]) == parts[1]
			body
				if name.length == 1
					return name.toLower
				else
					upperCount = 0
					for ch in name
						if ch.isUpper
							upperCount += 1
						else
							break
					if upperCount == 0
						return name
					if upperCount == name.length  # all upper like 'PI'
						return name.toLower
					if upperCount == 1
						return name[0].toLower.toString + name[1:]
					else
						# multi upper count like OSVersion or UTF8
						if name[upperCount].isLetter
							return name[:upperCount-1].toLower + name[upperCount-1:]  # osVersion
						else
							return name[:upperCount].toLower + name[upperCount:]  # utf8


		## Code gen

		var _sharpKeyWordList = 'abstract as base bool break byte case catch char checked class const continue decimal default delegate do double else enum event explicit extern false finally fixed float for foreach goto if implicit in int interface internal is lock long namespace new null object operator out override params private protected public readonly ref return sbyte sealed short sizeof stackalloc static string struct switch this throw true try typeof uint ulong unchecked unsafe ushort using virtual void volatile while'.split

		# CC: should be a Set, not a Dictionary:
		var _sharpKeyWordSet = Dictionary<of String, bool>()

		def isSharpKeyWord(word as String) as bool
			"""
			Returns true if the given word is a keyword in C# 2.0.
			"""
			require
				word.length
			test
				assert .isSharpKeyWord('object')
				assert .isSharpKeyWord('if')
				assert not .isSharpKeyWord('total')
			body
				if _sharpKeyWordSet.count == 0
					for word in _sharpKeyWordList
						_sharpKeyWordSet[word] = true
				return _sharpKeyWordSet.containsKey(word)

		def sharpStringLiteralFor(s as String) as String
			#print '<> csStringLitFor'
			#print '   ([s])'
			sb = StringBuilder()
			sb.append('"')
			for c in s
				branch c
					on c'\n', sb.append('\\n')
					on c'\r', sb.append('\\r')
					on c'\t', sb.append('\\t')
					on c'\0', sb.append('\\0')
					on c'\\', sb.append('\\\\')
					on c'"', sb.append('\\"')
					else, sb.append(c)
			sb.append('"')
			r = sb.toString
			#print '   ([r])'
			return r

		def printSource(src as String)
			lineNum = 1
			for line in src.split(c'\n')
				line = line.replace("\t", "    ")
				print '[lineNum]|[line]'  # CC: right align and pad 0 the lineNum
				lineNum += 1

		def forceExtension(fileName as String, extension as String) as String
			require
				fileName.length
				extension.length
			ensure
				result.endsWith(extension)
			test
				assert Utils.forceExtension('foo.csv', '.exe') == 'foo.exe'
				assert Utils.forceExtension('foo.csv', 'exe') == 'foo.exe'
				assert Utils.forceExtension('foo', '.exe') == 'foo.exe'
				assert Utils.forceExtension('foo', 'exe') == 'foo.exe'
			body
				if not extension.startsWith('.')
					extension = '.' + extension
				return Path.changeExtension(fileName, extension) to !

		get isDevMachine as bool
			return Environment.getEnvironmentVariable('COBRA_IS_DEV_MACHINE') == '1'

		get isRunningOnUnix
			platform = Environment.osVersion.platform to int
			return platform in [4, 128] # http://www.mono-project.com/FAQ:_Technical

		def readKeyValues(path as String) as Dictionary<of String, String>
			require path.length
			return .readKeyValues(path, File.openText(path), Console.out)
		
		def readKeyValues(sr as StreamReader, warnings as TextWriter) as Dictionary<of String, String>
			return .readKeyValues(sr, Console.out)

		def readKeyValues(path as String, tw as TextReader, warnings as TextWriter) as Dictionary<of String, String>
			test
				nl = Environment.newLine
				warnings = Console.out
				d = Utils.readKeyValues('test', StringReader('# blah[nl][nl]foo = bar[nl]'), warnings)
				assert d.count == 1
				assert d['foo'] == 'bar'
			body
				d = Dictionary<of String, String>()
				while true
					line = tw.readLine
					if line is nil
						break
					line = line.trim
					if line == '' or line.startsWith('#')
						continue
					parts = line.split(@[c'='])
					if parts.length == 1
						warnings.writeLine('.readKeyValue: [path]: ignoring line: [line]')  # TODO: report line number
						continue
					key = parts[0].trim
					value = parts[1].trim
					d[key] = value
				return d

		var _cultureInfoForNumbers = System.Globalization.CultureInfo("en-US", false)

		get cultureInfoForNumbers from var
			"""
			To control decimal point and thousands separators in the language, it is necessary to
			pass a CultureInfo to .parse and .toString methods of decimal and float. Without this,
			Cobra would expect numeric literals to be formatted to the culture of the current user.
			This makes source code non-portable. This problem was reported from a non-English
			culture and the report requested that Cobra consistently use '.' for decimal.
			"""


class ShouldNotCallException
	inherits Exception
	# TODO: perhaps there should also be an attribute so the compiler can give compile-time warnings

	var _type as Type?

	def init
		base.init

	def init(t as Type)
		base.init('Type is [t]')
		_type = t

	get containingType from _type


class NotSupportedException
	inherits Exception

	def init
		base.init
