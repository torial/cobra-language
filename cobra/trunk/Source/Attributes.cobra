class AttributeList
	inherits List<of AttributeDecl>
	
	def init
		pass


class AttributeDecl
	inherits NamedNode

	var _expr as CallExpr

	def init(expr as Expr)
		require expr inherits IdentifierExpr or expr inherits CallExpr
		base.init(expr.token)
		# normalizing to CallExpr makes the rest of the implementation easier
		if expr inherits IdentifierExpr
			expr = CallExpr(expr.token, expr.name, List<of Expr>())
		_expr = expr to CallExpr
		_expr.isForAttribute = true

	get expr from var

	get name as String is override
		return _expr.name

	def _bindInt
		base._bindInt
		_expr.bindInt

	def _bindImp
		base._bindImp
		# support using 'Foo' when the real attribute class name is 'FooAttribute'
		name = _expr.name
		if not name.endsWith('Attribute') and .compiler.canNameBeUndottedMember(name) and not .compiler.symbolForName(name, true, false)
			if .compiler.symbolForName(name+'Attribute', true, false)
				_expr = CallExpr(_expr.token, name+'Attribute', _expr.args)
				_expr.isForAttribute = true
		_expr.bindImp
		# TODO: check that the properties exist when using x=...

	get typeForIdentifier as IType is override
		throw ShouldNotCallException(.getType)

	get typeForReceiver as IType is override
		throw ShouldNotCallException(.getType)

	def writeSharpDef(sw as SharpWriter) is override
		sw.write(r'[')
		expr = _expr
		sw.write('[expr.name]')
		if expr.args.count
			sw.write('(')
			sep = ''
			for arg in expr.args
				sw.write(sep)
				if arg inherits AssignExpr
					sw.write(Utils.capped((arg.left to dynamic).name))
					sw.write('=')
					arg = arg.right
				assert not arg inherits AssignExpr
				arg.writeSharpDefInContext(sw)
				sep = ', '
			sw.write(')')
		sw.writeLine(r']')
