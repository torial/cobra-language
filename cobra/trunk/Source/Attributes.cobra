class AttributeList
	inherits List<of AttributeDecl>
	
	def init
		pass


class AttributeDecl
	is partial
	inherits NamedNode

	var _expr as PostCallExpr

	def init(expr as Expr)
		require expr inherits IdentifierExpr or expr inherits PostCallExpr
		base.init(expr.token)
		# normalizing to PostCallExpr makes the rest of the implementation easier
		if expr inherits IdentifierExpr
			expr = PostCallExpr(expr.token, IdentifierExpr(expr.token, expr.name), List<of Expr>())
		_expr = expr to PostCallExpr
		_expr.isForAttribute = true

	get expr from var

	get name as String is override
		return _expr.name

	def _bindInt
		base._bindInt
		_expr.bindInt

	def _bindImp
		base._bindImp
		# support using 'Foo' when the real attribute class name is 'FooAttribute'
		name = _expr.name
		if not name.endsWith('Attribute') and .compiler.canNameBeUndottedMember(name) and not .compiler.symbolForName(name, true, false)
			if .compiler.symbolForName(name+'Attribute', true, false)
				_expr = PostCallExpr(_expr.token, IdentifierExpr(_expr.token, name+'Attribute'), _expr.args)
				_expr.isForAttribute = true  # CC: use property set in initializer
		_expr.bindImp

	get typeForIdentifier as IType is override
		throw ShouldNotCallException(.getType)

	get typeForReceiver as IType is override
		throw ShouldNotCallException(.getType)

	def replaceChild(find as INode, replace as INode) as bool is override
		if _expr is find
			_expr = replace to PostCallExpr
			return true
		else
			return false


class AssemblyDecl
	is partial
	inherits NamedNode
	implements INameSpaceMember
	"""
	The only purpose of an assembly declaration is to hold assembly level attributes.
	"""
	
	var _parentNameSpace as NameSpace?
	var _attribs as AttributeList

	def init(token as IToken, attribs as AttributeList)
		base.init(token)
		_attribs = attribs

	get attributes from _attribs

	get englishName as String
		return 'assembly'

	get isFromAssembly as bool
		return true
	
	get isNames as List<of String>
		return List<of String>()

	get typeForIdentifier as IType? is override
		assert false
		return nil
	
	get typeForReceiver as IType? is override
		assert false
		return nil

	pro parentNameSpace from var
	
	def extensionMemberFor(box as Box, name as String) as IMember?
		return nil

	def _bindInt
		base._bindInt
		for attrib in _attribs
			try
				attrib.bindInt
			catch ne as NodeException
				.compiler.recordError(ne)

	def _bindImp
		base._bindImp
		for attrib in _attribs
			try
				attrib.bindImp
			catch ne as NodeException
				.compiler.recordError(ne)
	
	# TODO: shouldn't need these, but INameSpaceMember forces it on us (mostly/entirely through inheriting IMember)
	
	def unNilReturnType
		pass
	
	get isCallable as bool
		return false
	
	get isShared as bool
		return false

	get requiresThis as bool
		return false
		
	get resultType as IType?
		return nil
