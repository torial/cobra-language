use System.Reflection


namespace Cobra.Lang

	interface ITreeBuilder
		def indent
		def outdent
		def addEntry(key as String, value as dynamic?)

	class MustUseResultAttribute
		has AttributeUsage(AttributeTargets.Method, allowMultiple=false)
		inherits Attribute
		pass

	class CobraDirectString
		is extern
		"""
		Used internally for assert, require and ensure to encode strings that should not be passed to CobraCore.toTechString.
		"""
		def init(s as String)
			pass
		get string as String
			return ''
		
	class Html
		"""
		Represents HTML that doesn't need to be encoded.
		Html.toString returns the contents as-is.
		"""
		var _contents as String
		def init(contents as String)
			_contents = contents
		get contents from var
		def toString as String is override
			return _contents

	class ObjectCatalog

		test
			cat = ObjectCatalog()
			assert cat.maxSerialNum == 0

			a = Object()
			cat.record(a)
			assert cat.maxSerialNum == 1000
			assert cat.contains(a)
			assert cat.serialNumFor(a) == 1000
			assert cat.objectFor(1000) is a

			b = Object()
			cat.record(b)
			assert cat.maxSerialNum == 1001
			assert cat.serialNumFor(a) == 1000
			assert cat.serialNumFor(b) == 1001
			assert cat.objectFor(1000) is a
			assert cat.objectFor(1001) is b

		var _objectToSerialNum = Dictionary<of Object, int>()
		var _serialNumToObject = Dictionary<of int, Object>()
		var _minSerialNum = 0
		var _maxSerialNum = 0

		def init
			pass

		get minSerialNum from var
		
		get maxSerialNum from var

		def contains(obj as Object) as bool
			return _objectToSerialNum.containsKey(obj)

		def contains(serialNum as int) as bool
			return _serialNumToObject.containsKey(serialNum)

		def record(obj as Object)
			ensure .contains(obj)
			if not _objectToSerialNum.containsKey(obj)
				_maxSerialNum = _objectToSerialNum.count + 1000
				_objectToSerialNum.add(obj, _maxSerialNum)
				_serialNumToObject.add(_maxSerialNum, obj)
				if _minSerialNum == 0
					_minSerialNum = _maxSerialNum

		def serialNumFor(obj as Object) as int
			require
				.contains(obj)
			ensure
				result >= 1000
				.contains(result)
			body
				return _objectToSerialNum[obj]

		def objectFor(serialNum as int) as Object
			require
				.contains(serialNum)
			ensure 
				.contains(result)
			body
				return _serialNumToObject[serialNum]

	class CobraInfo
		is extern

		get cobraPath as String is shared
			"""
			The Path of the cobra compiler executable that created this program.
			"""
			pass

	interface IHasSourceSite
		get sourceSite as SourceSite

	class ExceptionReportWriter
		is abstract
	
		def writeReport(tw as TextWriter, exc as Exception?)
			.writeReport(tw, exc, CobraImp.detailedStackTrace)

		def writeReport(tw as TextWriter, exc as Exception?, frames as Stack<of CobraFrame>) is abstract


	class TextExceptionReportWriter
		inherits ExceptionReportWriter

		def writeReport(tw as TextWriter, exc as Exception?, frames as Stack<of CobraFrame>) is override
			# dump the most recent stack frames last since the text will output top-down and scroll in the shell
			tw.writeLine('Stack trace:')
			if not frames.count
				tw.writeLine('No stack frames.')
			else
				i = 0
				for frame in frames
					frame.dumpText(tw, i)
					i += 1


	## For testing
	
	enum FB
		Foo
		Bar

	
	class TestDefaultToString
	
		def toString as String is override
			# return something different than the class name to tease out the different behavior that toTechString exhibits in this case (which is to add the class name to the .toString output)
			return 'Test Default To String'


	class NestedToString

		def toPrintString as String
			sb = StringBuilder(r'[')
			sep = ''
			for row in [[1, 2, 3], [1, 2, 3]]
				sb.append('[sep][row]')
				sep = ', '
			sb.append(']')
			return sb.toString


	class CustomToString

		def toPrintString as String
			return '-- to print string --'
	
		def toTechString as String
			return '-- to tech string --'


	class EnumerableToString
		implements System.Collections.IEnumerable
		
		def getEnumerator as System.Collections.IEnumerator
			return [1, 2, 3].getEnumerator


	class BadToTechString

		def toTechString as String
			throw InvalidOperationException('foo')

	class TestAid

		def testGenMethod1<of T>(t as T)
			pass

		def testGenMethod2<of T>(t as T) as T
			return t

		shared
		
			def testGenMethod3<of T>(t as T)
				pass

			def testGenMethod4<of T>(t as T) as T
				return t
