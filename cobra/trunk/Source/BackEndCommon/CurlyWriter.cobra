enum CurlyLineNumberTreatment
	None
	PoundLine
	Comment



class CurlyWriter inherits TextWriter implements IDisposable is abstract

	var _innerWriter as TextWriter

	var _cobraLineNum as int
	var _curlyLineNum as int
	var _curlyToCobraLineNum as Dictionary<of int, int>

	cue init(tw as TextWriter)
		base.init
		_innerWriter = tw
		_cobraLineNum = _curlyLineNum = 1
		_curlyToCobraLineNum = {1 : 1}

	get curlyToCobraLineNum from var

	def node(node as SyntaxNode)
		"""
		As C# code is generated, each of the nodes should invoke this method so that the
		CurlyWriter can manage line numbers.
		"""
		lineNum = node.token.lineNum
		if lineNum > 0
			# assert lineNum >= _cobraLineNum, '[lineNum], [_cobraLineNum]'
			# ^ Can't assert that because of post while statements, helper methods, etc.
			_cobraLineNum = lineNum

	def start(fileName as String) is abstract

	def _writeLineNum is abstract

	def bumpLineNum
		_cobraLineNum += 1


	## Indentation
	
	var _indentLevel = 0
	var _totalIndentString = ''
	var _atBOL = true

	def indent
		_indentLevel += 1
		_setTotalIndentString

	def dedent
		_indentLevel -= 1
		_setTotalIndentString

	pro indentString from var = '\t'
		"""
		Returns the string used for one level of indentation.
		Default value is "\t".
		"""

	def indentAndWrite(s as String)
		.indent
		.write(s)

	def writeAndIndent(s as String)
		.write(s)
		.indent

	def dedentAndWrite(s as String)
		.dedent
		.write(s)


	## Being a TextWriter

	def write(value as char) is override
		.write(value.toString)

	def write(s as String?) is override
		# performance sensitive code
		if s is nil, return
		start = 0
		length = s.length
		for i in length
			if s[i] == c'\n'
				if i > start
					if _atBOL
						_writeLineNum
						_innerWriter.write(_totalIndentString)
					_innerWriter.write(s.substring(start, i-start))
				_innerWriter.write(c'\n')
				_atBOL = true
				start = i + 1
		if start < length
			if _atBOL
				_writeLineNum
				_innerWriter.write(_totalIndentString)
			_innerWriter.write(s.substring(start, length-start))
			_atBOL = false

	def writeLine(s as String?) is override
		.write(s)
		_innerWriter.write(c'\n')
		_atBOL = true

	get encoding as Encoding? is override
		return _innerWriter.encoding

	def toString as String is override
		return _innerWriter.toString

	def flush is override
		_innerWriter.flush

	def dispose is new
		_innerWriter.dispose


	## Self util

	def _setTotalIndentString
		# to-do: speed up with _indentChar
		sb = StringBuilder(_indentLevel * _indentString.length)
		for i in _indentLevel, sb.append(_indentString)
		_totalIndentString = sb.toString


class CodePoundLineWriter inherits CurlyWriter

	def start(fileName as String) is override
		_innerWriter.writeLine('#line 1 "[fileName]"')

	def _writeLineNum is override
		_innerWriter.writeLine('#line [_cobraLineNum]')


class CodeCommentLineWriter inherits CurlyWriter

	def start(fileName as String) is override
		_innerWriter.writeLine('// #line 1 "[fileName]"')

	def _writeLineNum is override
		_innerWriter.writeLine('// #line [_cobraLineNum]')
