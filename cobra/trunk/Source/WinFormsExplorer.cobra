"""
Cobra Compiler WinForms Explorer

This runs the Cobra compiler as usual, but then follows it up with a GUI window (using WinForms) that enables you to explore all the objects that resulted from compilation including the compiler, modules, namespaces, declarations, statements and expressions.

TODO
	[ ] On the right, show the .toString
	[ ] In the tree, show the elements of
		[ ] lists
		[ ] dictionaries
		[ ] sets
	[ ] Search for text anywhere in the object graph

IDEAS
	--	Sort the properties "logically", like all the primitives together (bools, then ints, etc.) and alpha within,
		and then object reference properties like .type
		and then "subnodes" type properties like lists

"""

use System.Drawing
use System.Windows.Forms
use System.Reflection


class CobraMain
	inherits Form
	
	shared

		var _commandLine as CommandLine?

		var _willTimeIt as bool

		pro willTimeIt from var
		
		def main
			has STAThread
			# CobraCore.willCheckAll = false
			
			# Run the command line as usual:
			startTime = DateTime.now
			try
				_commandLine = CommandLine()
				_commandLine.run
			finally
				if _willTimeIt
					print 'timeit = [DateTime.now.subtract(startTime)]'
			
			# Now explore the result:
			Application.enableVisualStyles
			form = CobraMain()
			form.show
			Application.run(form)

	var _propertyGrid as PropertyGrid
	var _statusStrip as ToolStrip?
	var _toolStrip as ToolStrip
	var _treeView as TreeView
	var _objectIdStrip as ToolStrip

	def init
		.text = 'Cobra Compiler WinForms Explorer'
		.startPosition = FormStartPosition.Manual
		_initSize
		_makeControls
		
	def onLoad(e as EventArgs) is override, protected
		base.onLoad(e)
		_populateNav
		_treeView.focus

	def onActivated(e as EventArgs) is override, protected
		base.onActivated(e)

	def _initSize
		area = Screen.primaryScreen.workingArea
		fraction = 0.80
		x = (area.width  * (1.0 - fraction) / 2 + area.x) to int
		y = (area.height * (1.0 - fraction) / 2 + area.y) to int
		w = (area.width  * fraction) to int
		h = (area.height * fraction) to int
		p = Point(x, y)
		.location = Point(x, y)
		.size = Size(w, h)

	def _makeControls
		splitContainer = SplitContainer()
		splitContainer.parent = this
		splitContainer.dock = DockStyle.Fill
		splitContainer.fixedPanel = FixedPanel.Panel1
		
		_treeView = TreeView()
		_treeView.dock = DockStyle.Fill
		_treeView.hideSelection = false
		_treeView.parent = splitContainer.panel1
		_treeView.pathSeparator = ' / '
		listen _treeView.afterSelect, ref .treeViewAfterSelect
		listen _treeView.beforeExpand, ref .treeViewBeforeExpand
		
		detailsPanel = Panel()
		detailsPanel.dock = DockStyle.Fill
		detailsPanel.parent = splitContainer.panel2
		
		_propertyGrid = PropertyGrid()
		_propertyGrid.dock = DockStyle.Fill
		_propertyGrid.parent = detailsPanel
		
		_objectIdStrip = ToolStrip()
		_objectIdStrip.items.add('')
		_objectIdStrip.dock = DockStyle.Top
		_objectIdStrip.parent = detailsPanel
		
		_toolStrip = ToolStrip()
		_toolStrip.dock = DockStyle.Top
		_toolStrip.parent = this
		
		_makeMenu

	def _makeMenu
		pass

	def printScreenInfo
		sw = StringWriter()
		print to sw
			for screen in Screen.allScreens
				print
				print 'screen:'
				print '    type =', screen.getType
				print '    device name =', screen.deviceName
				print '    primary screen =', screen.primary
				print '    working area =', screen.workingArea
				print '    bounds =', screen.bounds
		TextBoxForm.show(sw.toString)

	def _populateNav
		tv = _treeView
		tv.beginUpdate
		try
			node = TreeNode()
			node.text = "Compiler"
			node.tag = _commandLine.compiler
			tv.nodes.add(node)
			
			dummy = TreeNode("dummy")
			dummy.tag = .dummyTag
			node.nodes.add(dummy)

			uiNode = TreeNode("UI")
			tv.nodes.add(uiNode)
			
			node = TreeNode("This Form")
			node.tag = this
			uiNode.nodes.add(node)

			node = TreeNode("TreeView")
			node.tag = _treeView
			uiNode.nodes.add(node)
			
			node = TreeNode("PropertyGrid")
			node.tag = _propertyGrid
			uiNode.nodes.add(node)
			
			node = TreeNode("PrimaryScreen")
			node.tag = Screen.primaryScreen
			uiNode.nodes.add(node)
		finally
			tv.endUpdate

	def treeViewAfterSelect(sender as Object, e as TreeViewEventArgs)
		# update the details view
		obj = e.node.tag
		if obj
			_objectIdStrip.items[0].text = .objectIdTextFor(obj)
		else
			_objectIdStrip.items[0].text = ''
		_propertyGrid.selectedObject = obj

	def objectIdTextFor(obj as dynamic) as String
		"""
		Subclasses can override this method to customize the text that appears in the "object id" strip in the details view.
		"""
		s = CobraCore.typeName(obj.getType)
		if .isPrimitive(obj)
			s += ' ' + CobraCore.toTechString(obj)
		else
			propInfo = obj.getType.getProperty('SerialNum') to System.Reflection.PropertyInfo?  # CC: why is this cast needed?
			if propInfo
				sn = propInfo.getValue(obj to Object, nil) ? ''
				s += '.' + sn.toString
			propInfo = obj.getType.getProperty('Name')
			if propInfo
				name = propInfo.getValue(obj, nil)
				s += ' ' + CobraCore.toTechString(name)
		return s

	def treeViewBeforeExpand(sender as Object, e as TreeViewCancelEventArgs)
		node = e.node
		if node.tag and node.nodes.count > 0 and node.nodes[0].tag is .dummyTag
			# need on-the-fly expanding
			node.nodes.removeAt(0)
			propInfos = List<of PropertyInfo>(node.tag.getType.getProperties)
			propInfos.sort(ref .comparePropInfo)
			for propInfo in propInfos
				if propInfo.name == 'Item'  # used for indexing. technically could be named something else, but this works in practice
					continue
				isGood = false
				try
					value = propInfo.getValue(node.tag, nil)
					isGood = true
				catch exc as Exception
					value = 'Caught during get: [exc.getType.name]: [exc.message]'
				child = TreeNode('[.cobraMemberNameFor(propInfo.name)] == [CobraCore.toTechString(value)]')
				if isGood
					child.tag = value
					if value and not .isPrimitive(value to !)
						dummy = TreeNode("dummy")
						dummy.tag = .dummyTag
						child.nodes.add(dummy)
				node.nodes.add(child)

	def comparePropInfo(a as PropertyInfo, b as PropertyInfo) as int
		return a.name.toLower.compareTo(b.name.toLower)

	def cobraMemberNameFor(name as String) as String
		return if(name[0]=='_', '', '.') + name[0].toLower.toString + name[1:]

	get dummyTag
		return '-- dummy tag --'

	def isPrimitive(value as dynamic) as bool
		if value inherits bool, return true
		if value inherits char, return true
		if value inherits decimal, return true
		if value inherits int, return true
		if value inherits float, return true
		if value inherits String, return true
		return false


class TextBoxForm
	inherits Form

	shared
	
		def show(text as String) as TextBoxForm
			form = TextBoxForm(text)
			form.show
			return form
	
	def init(text as String)
		.init(text, 800, 600)

	def init(text as String, width as int, height as int)
		text = text.replace('\0', '\\0')
		.size = System.Drawing.Size(width, height)
		tb = TextBox()
		tb.multiline = true
		tb.dock = DockStyle.Fill
		tb.parent = this
		tb.text = text
