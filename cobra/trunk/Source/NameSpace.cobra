interface INameSpaceMember
	inherits IMember
	"""
	Anything that can be a member of a namespace should implement INameSpaceMember.
	This includes boxes, enums and namespaces.
	"""
	pass


class NameSpace
	inherits Container<of INameSpaceMember>
	implements IParentSpace, INameSpaceMember

	var _unifiedNameSpace as NameSpace?
	var _superNameSpace as NameSpace?
	var _subNameSpacesByName as Dictionary<of String, NameSpace>
	var _subNameSpacesList as List<of NameSpace>
	var _useDirectives as List<of UseDirective>
	var _didBindUse as bool

	def init(unifiedNameSpace as NameSpace, name as String)
		.init(TokenFix.empty, name)
		_unifiedNameSpace = unifiedNameSpace
		_useDirectives = List<of UseDirective>()

	def init(token as IToken, name as String)
		.init(token, name, nil, nil)

	def init(token as IToken, name as String, superNameSpace as NameSpace?)
		.init(token, name, superNameSpace, nil)

	def init(token as IToken, name as String, superNameSpace as NameSpace?, docString as String?)
		base.init(token, name, List<of String>(), docString)
		_superNameSpace = superNameSpace
		_subNameSpacesByName = Dictionary<of String, NameSpace>()
		_subNameSpacesList = List<of NameSpace>()
		_useDirectives = List<of UseDirective>()

	get didBindUse from var

	get englishName as String is override
		return 'namespace'

	get isGlobal as bool
		return _superNameSpace is nil and _name=='(global)'

	get isReference as bool is override  # TODO: remove when not a type
		assert false
		return true

	get sharpInit as String is override  # TODO: remove when not a type
		assert false
		return ''
	
	get defaultAccessLevel as String is override  # TODO: remove when not a type
		assert false
		return ''

	get isRoot as bool
		"""
		Returns true if this is a root namespace with no parent namespace.
		All module top-level namespaces are root as well as their common, unified namespace, the global namespace.
		"""
		return _superNameSpace is nil
		
	get isUnified as bool
		return _unifiedNameSpace is nil

	get superNameSpace from var

	get unifiedNameSpace from var  # TODO: add an ensure that the return value is nil or .isUnified

	def addMinFields
		base.addMinFields
		.addField('subCount', _subNameSpacesList.count)
		.addField('isUnified', .isUnified)
		.addField('didBindUse', _didBindUse)

	def addRefFields
		base.addRefFields
		.addField('superNameSpace', _superNameSpace)
		.addField('unifiedNameSpace', _unifiedNameSpace)

	get fullName as String
		ensure
			not .isRoot implies .name in result
			not result.startsWith('.')
			not result.endsWith('.')
		body
			if _superNameSpace is nil
				return 'global'
			# TODO: cache this
			t = List<of String>()
			ns = this to ?
			while ns and not ns.isRoot
				t.add(ns.name)
				ns = ns._superNameSpace
			t.reverse
			return Utils.join('.', t)

	def getOrMakeNameSpaceNamed(token as IToken, name as String) as NameSpace  # CC: same
		"""
		Returns the existing sub-namespace with the given name or creates it.
		Raises ValueError if there is a declaration in the namespace with the given name that is not a namespace.
		"""
		ensure result.superNameSpace is this
		# TODO: enforce that case must match and 2 decls cannot be the same but for case. You cannot have a namespace FooBar and class Foobar under the same namespace
		if _subNameSpacesByName.containsKey(name)
			ns = _subNameSpacesByName[name]
		else
			if _declsByName.containsKey(name)
				throw Exception('There is a non-namespace declaration named "[name]".')
			ns = NameSpace(token, name, this)
			if not .isUnified
				# mirror in the unified namespace
				uns = _unifiedNameSpace.getOrMakeNameSpaceNamed(token, name)
				assert uns.isUnified
				ns._unifiedNameSpace = uns
			.addDecl(ns)
		return ns

	get typeForIdentifier as IType? is override
		# TODO: in reality, you can't say "x = SomeNameSpace" or pass a
		# namespace as an argument. That should be fixed by allowing those
		# things perhaps as some form of reflection where namespaces
		# become runtime objects. Or this property should return a new
		# .compiler.invalidType which then triggers an error if you try to
		# use it.
		return this

	get typeForReceiver as IType? is override
		return this

	def bindUse
		if _didBindUse
			return
		.compiler.nameSpaceStack.push(this)
		try
			for ud in _useDirectives
				ud.bindUse
			for ns in _subNameSpacesList
				ns.bindUse
		finally
			.compiler.nameSpaceStack.pop		
		_didBindUse = true

	def _bindInh is override
		base._bindInh
		assert _didBindUse
		.compiler.nameSpaceStack.push(this)
		try
			for decl in _declsInOrder
				decl.bindInh
			for ns in _subNameSpacesList
				ns.bindInh
		finally
			.compiler.nameSpaceStack.pop		

	def _bindInt
		base._bindInt
		assert .didBindInh
		.compiler.nameSpaceStack.push(this)
		try
			for ud in _useDirectives
				ud.bindInt  # not logically needed (bindUse takes care of use directives), but nodes like to get at least one of .bindInt or .bindImp
			for decl in _declsInOrder
				decl.bindInt
		finally
			.compiler.nameSpaceStack.pop

	def _bindImp
		base._bindImp
		.compiler.nameSpaceStack.push(this)
		try
			for decl in _declsInOrder
				decl.bindImp
		finally
			.compiler.nameSpaceStack.pop

	def symbolForName(name as String) as IMember?
		if not .isUnified
			x = _unifiedNameSpace.symbolForName(name)
			if x
				return x
			# inside a use directive?
			return _symbolForNameFromUseDirectives(name)
		else
			# our decl?
			# TODO: should this come before checking our name? what does C# do?
			x = .declForName(name)
			if x
				return x

			# a parent namespace?
			if _superNameSpace
				x = _superNameSpace.symbolForName(name)
				if x
					return x

		return nil

	def _symbolForNameFromUseDirectives(name as String) as IMember?
		for ud in _useDirectives
			x = ud.findSymbol(name)
			if x
				return x
		if _superNameSpace
			return _superNameSpace._symbolForNameFromUseDirectives(name)
		else
			return nil

	def addDecl(decl as INameSpaceMember) is override
		base.addDecl(decl)
		if decl inherits NameSpace
			assert decl.superNameSpace is this
			assert (.isUnified and decl.isUnified) or (not .isUnified and not decl.isUnified)  # TODO: uh, just change to ==
			_subNameSpacesByName.add(decl.name, decl)  # TODO: add some require and ensure around the subNameSpaces
			_subNameSpacesList.add(decl)
		if decl inherits NameSpace
			assert decl.parentNameSpace is this or decl.parentNameSpace is nil
			decl.parentNameSpace = this
		else
			if decl.parentNameSpace
				assert .isUnified
				assert decl.parentNameSpace.unifiedNameSpace is this
			else
				assert not .isUnified
				decl.parentNameSpace = this
		if not .isUnified
			# mirror the declarations in the unified namespace
			if decl inherits NameSpace
				pass
			else
				_unifiedNameSpace.addDecl(decl)

	def addUseDirective(ud as UseDirective)
		_useDirectives.add(ud)

	def subNameSpaceForName(name as String) as NameSpace?
		require name.length
		if _subNameSpacesByName.containsKey(name)
			return _subNameSpacesByName[name]
		else
			return nil

	def unifyInto(newGlobal as NameSpace)
		"""
		This is built for the very specific purpose of caching modules during "testify" (see CommandLine.cobra and Compiler.init).
		"""
		require
			newGlobal.isGlobal
			newGlobal is not this
			not .isUnified
			newGlobal.isUnified
		body
			_unifyInto(newGlobal)
			
	def _unifyInto(uni as NameSpace)
		require
			uni.isUnified
			not .isUnified
		body
			_unifiedNameSpace = uni
			for decl in .declsInOrder
				if decl inherits NameSpace
					newUniForDecl = uni.getOrMakeNameSpaceNamed(decl.token, decl.name)
					decl._unifyInto(newUniForDecl)
				else
					uni.addDecl(decl)

	get sharpRef as String is override
		if _superNameSpace is nil
			return 'global::'
		else
			return .fullName

	def writeSharpDef(sw as SharpWriter) is override
		assert not .isUnified
		base.writeSharpDef(sw)
		if not .isRoot
			sw.writeAndIndent('namespace [.name] {\n\n')
		for ud in _useDirectives
			ud.writeSharpDef(sw)
		for decl in _declsInOrder
			if decl inherits Box
				.compiler.boxStack.push(decl)
			decl.writeSharpDef(sw)
			if decl inherits Box
				.compiler.boxStack.pop
		if not .isRoot
			sw.dedentAndWrite('} // namespace [.name]\n')

	def writeSharpTestInvocation(sw as SharpWriter) is override
		for decl in _declsInOrder
			decl.writeSharpTestInvocation(sw)


class UseDirective
	inherits SyntaxNode

	var _nameParts as List<of String>
	var _boundNameSpace as NameSpace?
	var _fullName as String
	var _didBindUse as bool

	def init(token as IToken, nameParts as List<of String>)
		base.init(token)
		_nameParts = nameParts
		# CC: can't use String.join because it takes the parts as an array instead of IEnumerable<of String>. add that as an extension method. (well, could use .toArray)
		_fullName = Utils.join('.', nameParts)

	def addMinFields
		base.addMinFields
		.addField('fullName', _fullName)
		.addField('didBindUse', _didBindUse)

	def addRefFields
		base.addRefFields
		.addField('boundNameSpace', _boundNameSpace)

	get didBindUse from var

	def findSymbol(name as String) as IMember?
		require .didBindUse
		return _boundNameSpace.symbolForName(name)

	def bindUse
		curNS = .compiler.globalNS to ?
		for name in _nameParts
			curNS = curNS.subNameSpaceForName(name)
			if curNS is nil
				break
		if curNS is nil
			.throwError('Cannot locate namespace "[_fullName]".')  # TODO: include last valid namespace
		# TODO: this assertion can be re-established when Cobra reads DLLs
		#assert curNS, 'last name=[name], dottedNames=[.dottedNames]'
		_boundNameSpace = curNS
		_didBindUse = true

	def writeSharpDef(sw as SharpWriter) is override
		sw.write('using [_fullName];\n')
