"""
Pair.cobra

Provides three Pair classes:

	-- dynamic

		Pair('foo', 3)
		Pair(2, 2)

	-- one type arg - both elements of the pair are the same type

		Pair<of int>(2, 2)
		Pair<of String>('foo', 'bar')

	-- two type args - elements can be different types

		Pair<of int, String>(3, 'three')
		Pair<of Customer, decimal>(c, amount)

As expected, the dynamic version is flexible and convenient, while the static/generic version
provides additional compile-time error checking and run-time performance. Use what you like.

The elements of the pair are accessed as .a and .b or [0] and [1]. You can also use `for` loop on a
pair as it is enumerable. Comparisons between pairs such as `p1 < p2` are effectively comparisons of
their elements.

You can use a pair's hash code as long as its elements aren't mutable. That means you can put pairs
in sets or use them as keys in dictionaries.

Unit tests below show examples of using pairs.

To run the unit tests:
cobra -test Pair.cobra
"""

class BasePair is abstract

	def _compare(a, b) as int
		"""
		Gracefully handle comparisons that involve nil.
		A simple `a.compareTo(b)` does not work if `a` can be `nil`.
		"""
		if a is nil
			if b is nil, return 0
			else, return -1
		else if b is nil
			return 1
		else
			return a.compareTo(b)

	def _combine(hc1 as int, hc2 as int) as int
		# don't use xor (^) because a^b == 0 if the two values are the same
		# that would make Pair('foo','foo'), Pair(1, 1), Pair(3.0, 3.0) all hash to 0
		hash = 37
		hash = hash * 23 + hc1
		hash = hash * 23 + hc2
		return hash


class Pair<of T> inherits BasePair
	implements System.Collections.IEnumerable, IComparable<of Pair<of T>>

	test
		p = Pair<of int>(1, 2)
		assert p.a == 1 and p.b == 2
		assert p[0] == 1 and p[1] == 2
		assert p.toString == 'Pair(1, 2)'
		expect IndexOutOfRangeException, assert p[2] == 3

	cue init(a, b)
		base.init
		_a, _b = a, b
	
	get a from var as T
	
	get b from var as T

	get [i as int] as T
		if i == 0, return _a
		if i == 1, return _b
		throw IndexOutOfRangeException('Index [i] is out of range for a pair (0-1).')
		
	def toString as String is override
		sa = CobraCore.toTechString(.a)
		sb = CobraCore.toTechString(.b)
		return '[.typeOf.name]([sa], [sb])'

	def equals(obj as Object?) as bool is override
		test
			assert Pair<of String>('a', 'b') == Pair<of String>('a', 'b')
		body
			if obj is nil, return false
			if obj is this, return true
			if obj inherits Pair<of T>, return obj.a == .a and obj.b == .b
			return false

	def compareTo(p as Pair<of T>) as int
		test
			assert Pair<of String>('a', 'b') < Pair<of String>('b', 'c')
			assert Pair<of int>(2, 3) > Pair<of int>(2, 2)
			assert Pair<of String?>(nil, 'a') < Pair<of String?>(nil, 'b')
			assert Pair<of int?>(nil, nil) < Pair<of int?>(1, 1)
		body
			diff = _compare(.a, p.a)
			if diff == 0, diff = _compare(.b, p.b)
			return diff

	def getHashCode as int is override
		test
			d = {
				Pair<of int>(1, 1): 'one',
				Pair<of int>(2, 2): 'two',
				Pair<of dynamic>(nil, nil): 'nil',
			}
			assert d[Pair<of int>(1, 1)] == 'one'
			assert d[Pair<of int>(2, 2)] == 'two'
			assert d[Pair<of dynamic>(nil, nil)] == 'nil'
		body
			return _combine(if(.a is nil, 0, .a.getHashCode), if(.b is nil, 0, .b.getHashCode))

    def getEnumerator as System.Collections.IEnumerator
		test
			assert (for s in Pair<of String>('a', 'b') get s) == ['a', 'b']
		body
			yield .a
			yield .b


class Pair<of TA, TB> inherits BasePair
	implements System.Collections.IEnumerable, IComparable<of Pair<of TA, TB>>
	
	test
		p = Pair<of int, int>(1, 2)
		assert p.a == 1 and p.b == 2
		assert p[0] == 1 and p[1] == 2
		assert p.toString == 'Pair(1, 2)'
		expect IndexOutOfRangeException, assert p[2] == 3

	cue init(a, b)
		base.init
		_a, _b = a, b
	
	get a from var as TA
	
	get b from var as TB

	get [i as int] as dynamic?
		if i == 0, return _a
		if i == 1, return _b
		throw IndexOutOfRangeException('Index [i] is out of range for a pair (0-1).')
		
	def toString as String is override
		sa = CobraCore.toTechString(.a)
		sb = CobraCore.toTechString(.b)
		return '[.typeOf.name]([sa], [sb])'

	def equals(obj as Object?) as bool is override
		test
			assert Pair<of String, String>('a', 'b') == Pair<of String, String>('a', 'b')
		body
			if obj is nil, return false
			if obj is this, return true
			if obj inherits Pair<of TA, TB>, return obj.a == .a and obj.b == .b
			return false

	def compareTo(p as Pair<of TA, TB>) as int
		test
			assert Pair<of String, int>('a', 3) < Pair<of String, int>('b', 4)
			assert Pair<of int, int>(2, 3) > Pair<of int, int>(2, 2)
			assert Pair<of String?, String?>(nil, 'a') < Pair<of String?, String?>(nil, 'b')
			assert Pair<of int?, int?>(nil, nil) < Pair<of int?, int?>(1, 1)
		body
			diff = _compare(.a, p.a)
			if diff == 0, diff = _compare(.b, p.b)
			return diff

	def getHashCode as int is override
		test
			d = {
				Pair<of int, String>(1, 'one'): 'one',
				Pair<of int, int>(2, 2): 'two',
				Pair<of dynamic, dynamic>(nil, nil): 'nil',
			}
			assert d[Pair<of int, String>(1, 'one')] == 'one'
			assert d[Pair<of int, int>(2, 2)] == 'two'
			assert d[Pair<of dynamic, dynamic>(nil, nil)] == 'nil'
		body
			return _combine(if(.a is nil, 0, .a.getHashCode), if(.b is nil, 0, .b.getHashCode))
	
    def getEnumerator as System.Collections.IEnumerator
		test
			assert (for s in Pair<of String, String>('a', 'b') get s) == ['a', 'b']
		body
			yield .a
			yield .b


class Pair inherits BasePair
	implements System.Collections.IEnumerable, IComparable<of Pair>
	"""
	to-do: could this be done as a subclass of Pair<of dynamic, dynamic> ?
	"""
	
	test
		p = Pair(1, 2)
		assert p.a == 1 and p.b == 2
		assert p[0] == 1 and p[1] == 2
		assert p.toString == 'Pair(1, 2)'
		expect IndexOutOfRangeException, assert p[2] == 3

	cue init(a, b)
		base.init
		_a, _b = a, b
	
	get a from var as dynamic?
	
	get b from var as dynamic?

	get [i as int] as dynamic?
		if i == 0, return _a
		if i == 1, return _b
		throw IndexOutOfRangeException('Index [i] is out of range for a pair (0-1).')
		
	def toString as String is override
		sa = CobraCore.toTechString(.a)
		sb = CobraCore.toTechString(.b)
		return '[.typeOf.name]([sa], [sb])'

	def equals(obj as Object?) as bool is override
		test
			assert Pair('a', 'b') == Pair('a', 'b')
		body
			if obj is nil, return false
			if obj is this, return true
			if obj inherits Pair, return obj.a == .a and obj.b == .b
			return false

	def compareTo(p as Pair) as int
		test
			assert Pair('a', 'b') < Pair('b', 'c')
			assert Pair(2, 3) > Pair(2, 2)
			assert Pair(nil, 'a') < Pair(nil, 'b')
			assert Pair(nil, nil) < Pair(1, 1)
		body
			diff = _compare(.a, p.a)
			if diff == 0, diff = _compare(.b, p.b)
			return diff

	def getHashCode as int is override
		test
			d = {
				Pair(1, 1): 'one',
				Pair(2, 2): 'two',
				Pair(nil, nil): 'nil',
			}
			assert d[Pair(1, 1)] == 'one'
			assert d[Pair(2, 2)] == 'two'
			assert d[Pair(nil, nil)] == 'nil'
		body
			return _combine(if(.a is nil, 0, .a.getHashCode), if(.b is nil, 0, .b.getHashCode))
	
    def getEnumerator as System.Collections.IEnumerator
		test
			assert (for s in Pair('a', 'b') get s) == ['a', 'b']
		body
			yield .a
			yield .b


class Program

	def main
		print 'done.'

