"""
Run with -turbo for max speed (no run-time checks).
"""


class Matrix
	"""
	This class provides an n-dimensional matrix.
	The dimension sizes and even the number of dimensions may be not be known until run-time.
	
	to-do: make a generic class
	to-do: equality operator
	"""

	const minDimRank = 1
	const maxDimRank = 1_000_000
	const maxCount = 1_000_000_000
	
	test
		m = Matrix(1)
		assert m.count == 1
		assert m[0] == 0
		m[0] = 42
		assert m[0] == 42
		expect Exception, print m[1]  # to-do: IndexOutOfRangeException
		
		m = Matrix(3, 7)
		assert m.count == 21
		for x in 3, for y in 7, m[x, y] = x*y
		for x in 3, for y in 7, assert m[x, y] == x*y
		
		d1, d2, d3 = 10, 5, 3
		m = Matrix(d1, d2, d3)
		assert m.count == d1 * d2 * d3
		for x in d1, for y in d2, for z in d3, m[x, y, z] = x*y*z
		for x in d1, for y in d2, for z in d3, assert m[x, y, z] == x*y*z
		
		dims = [d1, d2, d3]
		m2 = Matrix(dims)
		for x in d1, for y in d2, for z in d3, m[x, y, z] = x*y*z
		for x in d1, for y in d2, for z in d3, assert m[x, y, z] == x*y*z
# to-do:		assert m2 == m

	var _dims as IList<of int>
	var _count = 1
	var _data as int[]

	cue init(dims as vari int)
		require dims.length > 0 and all for dim in dims get dim >= .minDimRank and dim <= .maxDimRank
		.init(dims.toList)

	cue init(dims as IList<of int>)
		require dims.count > 0 and all for dim in dims get dim >= .minDimRank and dim <= .maxDimRank
		base.init
		_dims = dims.clone
		for dim in dims, _count *= dim
		assert _count < .maxCount
		_data = int[](_count)
		assert _data.length == _count
	
	get count from var
	
	get dims as IList<of int>
		return _dims.clone

	# woops. accessing the following indexer gives:
	# error: Argument 1 of indexer expects type vari int, but the call is supplying type int.
	pro [indexes as vari int] as int
		get
			require indexes.length == .dims.count
			return _data[_address(indexes)]
		set
			require indexes.length == .dims.count
			_data[_address(indexes)] = value

	def _address(indexes as vari int) as int
		assert indexes.length == _dims.count
		# The below calcs are "row-major order", if it matters.
		# See http://en.wikipedia.org/wiki/Row-major_order#Generalization_to_higher_dimensions
		index = 0
		len = indexes.length
		for i in len
			x = 1
			for j in i+1 : len, x *= _dims[j]
			x *= indexes[i]
			index += x
		return index


class TestMatrix

	def main
		print 'done.'
