"""
The `dynamic` type crossed with statements.
"""

class A

	get foo as String
		return 'foo'


class E
	inherits Exception

	pass


class Test

	def main is shared
		Test().run

	def run
		x as dynamic = 1
		xq as dynamic?
		y as dynamic = 2
		yq as dynamic?

		# `for` loop statement

		for i in [1, 2, 3]
			assert i

		for x in [1, 2, 3]
			assert x
		x = [1, 2, 3]
		for i in x
			assert i
		for y in x
			assert y

		for xq in [1, 2, 3]
			assert xq
		xq = [1, 2, 3]
		for i in xq
			assert i
		for yq in xq
			assert yq

		for x = 2 .. 10
			assert x >= 2
		for xq = 2 .. 10
			assert xq >= 2

		da as dynamic = 1
		for di = da .. 10
			assert di > 0
		db as dynamic = 10
		for dj = 1 .. db
			assert dj > 0
		for dk = da .. db
			assert dk > 0


		# if-inherits

		x = 5
		visited = 0
		if x inherits A
			visited += 1
			assert x.foo == 'foo'
		assert visited == 0
		x = A()
		if x inherits A
			visited += 1
			assert x.foo == 'foo'
		assert visited == 1
		xq = 5
		if xq inherits A
			visited += 1
			assert x.foo == 'foo'
		assert visited == 1
		xq = A()
		if xq inherits A
			visited += 1
			assert x.foo == 'foo'
		assert visited == 2


		# if-not-nil

		xq = nil
		visited = 0
		if xq
			visited += 1
		assert visited == 0
		xq = 'aoeu'
		if xq
			visited += 1
		assert visited == 1


		# print

		x = 5
		sw = StringWriter()
		print x
		print to sw, x
		assert sw.toString.trim == '5'
		x = 'aoeu'
		sw = StringWriter()
		print x
		print to sw, x
		assert sw.toString.trim == 'aoeu'


		# trace

		sw = StringWriter()
		CobraCore.tracer.destination = sw
		x = 'aoeu'
		xq = 5
		trace x, xq
		prefix = CobraCore.tracer.prefix
		sep = CobraCore.tracer.separator
		assert sw.toString.trim.startsWith("[prefix]x='aoeu'[sep]xq=5[sep]")


		# throw

		visited = 0
		try
			e as dynamic = E()
			throw e
		catch E
			visited = 1
		assert visited == 1


		# using

		using xq = StringWriter()
			xq.write('hi')
		assert xq is nil


		# while

		x = 0
		while x < 10
			x += 1
		assert x == 10
