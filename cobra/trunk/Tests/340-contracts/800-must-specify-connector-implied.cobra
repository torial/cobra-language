interface IMember
	get one as int


class Container

	def memberForName(name as String) as IMember?
		return nil


class Box
	inherits Container

	# What's being tested below is that the method is *implicitly* an override due to the use of base,
	# and this should not trick the compiler in failing to issue the error below.

	def memberForName(name as String) as IMember?
		require  # .error. The contract requires an "or" because the code member is "override".
			true
		body
			return base.memberForName(name)

class Test

	def main is shared
		pass
