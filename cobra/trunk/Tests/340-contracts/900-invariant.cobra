class A

	invariant
		.x > 0
		.name.length
	
	var _x as int
	
	def init
		_x = 1

	get x from var
	
	get name as String
		return .getType.name

	def violateX
		_x = 0


class B
	inherits A

	invariant
		.y > 0

	var _y as int
	
	def init
		_y = 1

	get y from var

	def violateY
		_y = 0

	def violateBaseClassInvariant
		_x = 0


class Test

	def main is shared
		a = A()
		expect InvariantException
			a.violateX
		a = A()
		expect AssertException  # The ancestor class to InvariantException
			a.violateX
		
		b = B()
		expect InvariantException
			b.violateX
		b = B()
		expect InvariantException
			b.violateY
		b = B()
		expect InvariantException
			b.violateBaseClassInvariant


# TODO: can an ancestor class method violate the invariant of a subclass? does that make sense from a "contracts and inheritance" perspective?
