# Invoke a method in an extension of a generic, ancestor interface.
# In this case, the class is Dictionary<of TKey, TValue>.KeyCollection
# and the extension method is declared on IEnumerable<of TKey> which KeyCollection implements.

# Then do it again for Dictionary<of TKey, TValue>.ValueCollection
# Note that it implement IEnumerable<of TValue> which is using the *2nd* generic parameter, not the first.

class Test

	def main
		d = {'x': 1, 'y': 1}

		for key in d.keys.toList.sorted
			assert key in ['x', 'y']
		assert (for key in d.keys.toList.sorted get key) == ['x', 'y']

		for value in d.values.toList
			assert value == 1
		assert (for value in d.values.toList get value) == [1, 1]
