# TODO: test calling without using .invoke
# TODO: test passing a ref to a method
# TODO: test accessing inherited members of MulticastDelegate and Delegate
# TODO: test wrapping a ref in a delegate instantiation
# TODO: test a sig decl inside a class
# TODO: in a different test file, test various errors

sig BinaryOp(a as int, b as int) as int


class Computer

	var _op as BinaryOp?
	var _a as int
	var _b as int

	def init(a as int, b as int)
		_a = a
		_b = b

	pro op from var

	def eval as int
		if _op
			return _op.invoke(_a, _b)
		else
			return 0


class Program

	def main is shared
		Program().run
	
	def run
		computer = Computer(2, 3)

		computer.op = ref .add
		print computer.eval

		computer.op = ref .mul
		print computer.eval

	def add(a as int, b as int) as int
		return a + b
	
	def mul(a as int, b as int) as int
		return a * b
