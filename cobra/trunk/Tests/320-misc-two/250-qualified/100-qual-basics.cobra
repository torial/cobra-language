namespace A

	class C1
		enum E
			EA
			EB

	namespace B
	
		class C2
			pass

		namespace C

			class C3
				pass


class Utils

	shared

		# qualified argument
		def join(sep as String, parts as System.Collections.IEnumerable) as String
			test
				assert Utils.join('.', ['a', 'b'])=='a.b'
			body
				sb as StringBuilder = StringBuilder()
				s = ''
				for part in parts  # compiler used to choke on inferring type of part from parts
					sb.append(s)
					sb.append(part.toString)
					s = sep
				return sb.toString

		def main
			# qualified creation
			System.Collections.ArrayList()
			a = System.Collections.ArrayList()
			a.add(1)
			assert .isArrayList(a)
			
			# from a declared namespace
			x = 1 to Object
			A.C1()
			x = A.C1()

			A.B.C2()
			x = A.B.C2()

			A.B.C.C3()
			x = A.B.C.C3()

			x = A.C1.E(EA, EB)  # qualified enum
			CobraCore.noOp(x)
			
		def isArrayList(obj as Object) as bool
			# if-inherits with qualified type
			if obj inherits System.Collections.ArrayList
				assert obj.count
				return true
			else
				return false
