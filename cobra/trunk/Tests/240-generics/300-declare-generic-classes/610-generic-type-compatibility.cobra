# some lines below use to generate false error messages


class Node<of T>
	where T must be IComparable<of T>

	var _left as Node<of T>?
	var _right as Node<of T>?
	var _item as T
	
	cue init
		pass

	cue init(item as T)
		.init(item, nil, nil)

	cue init(item as T, left as Node<of T>?, right as Node<of T>?)
		_item = item
		_left = left
		_right = right

	pro left from var
	
	pro right from var
	
	get item from var

	def compareTo(node as Node<of T>) as int
		# this method enables comparison operators in Cobra like "a < b" where a and b are Nodes
		return .item.compareTo(node.item)

class BinaryTree<of T>
	where T must be IComparable<of T>

	var _root as Node<of T>
	
	cue init(root as Node<of T>)
		_root = root

	pro root from var
	
	def add(items as vari T)
		for item in items
			.add(item)
	
	def add(item as T)
		_add(Node<of T>(item), _root)
	
	def _add(newNode as Node<of T>, root as Node<of T>)
		if newNode > root
			right = root.right
			if right
				_add(newNode, right)  # passing the second argument used to cause a false error message
			else
				root.right = newNode  # used to cause a false error message
		else if newNode > root
			left = root.left
			if left
				_add(newNode, left)  # passing the second argument used to cause a false error message
			else
				root.left = newNode  # used to cause a false error message


class Program
	
	def main is shared
		pass
