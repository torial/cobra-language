class X

	shared
	
		var _counter = 0
		
		get counter from var
	
		def incCounter
			_counter += 1

		def main
			s = Stuff(a=1, b=2)
			assert s.a == 1
			assert s.b == 2
	
			s = Stuff('a', b='b')
			assert s.a == 'a'
			assert s.b == 'b'
	
			letters = 'aoeu'
			s = Stuff(letters, b='b')
			assert s.a == letters
			assert s.b == 'b'
	
			s = Stuff(nil, b='b')
			assert s.a is nil
			assert s.b == 'b'
	
			s = Stuff(doSomething = ref .incCounter)  # pass a method reference
			assert .counter == 0
			ds = s.doSomething
			ds()
			assert .counter == 1
			
			t = Thing(nil, data=5)  # test passing nil to a strongly typed arg
			assert t.data == 5
	
			s = Stuff(style=StyleType(Hype))  # test enum construction nested inside a prop set


enum StyleType
	Undefined
	OldFashioned
	Hype


class Stuff

	var _a as dynamic?
	var _b as dynamic?
	var _style
	
	cue init
		pass

	cue init(a as dynamic?)
		_a = a

	pro a from var
	
	pro b from var

	pro style from var


	sig DoSomethingSig

	pro doSomething from var as DoSomethingSig?


class Thing

	var _data as dynamic?
	var _stuff = Stuff(a='a', b='b')  # test in var decl

	cue init(s as Stuff?)
		pass

	pro data from var
