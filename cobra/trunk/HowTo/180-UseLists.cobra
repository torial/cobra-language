class HowToUseLists

	def main
		.basics
		.looping
		.literals
		.printingAndStringConversion
		
	def basics
		# a list literal starts with [ and ends with ]
		# elements are separated by commas
		ints = [1, 2, 3]
		
		# a list has a number of elements - the .count
		assert ints.count == 3
		
		# lists can be indexed with brackets, starting with 0
		assert ints[0] == 1 and ints[1] == 2 and ints[2] == 3
		
		# .last gives the last element
		assert ints.last == 3
		
		# out bounds is an exception
		expect ArgumentOutOfRangeException, print ints[5]
		
		# .get allows a default value to be returned if the index is out of bounds
		assert ints.get(3, -1) == -1
		
		# .get allows negative indexes where -1 is the last element
		# -2 is the second to last
		assert ints.get(-2) == 2
		
		# a negative index can still be out of bounds
		expect RequireException, ints.get(-4)
		assert ints.get(-4, -1) == -1   # ...but you can provide a default value
		
		# lists can be compared
		assert ints == [1, 2, 3]

	def looping
		names = ['foo', 'bar', 'baz']

		# looping is easy
		for name in names
			assert name.length == 3
		
		# loop through a sorted version
		last = ''
		for name in names.sorted
			assert name > last
			last = name
		# the original list is unchanged
		assert names == ['foo', 'bar', 'baz']
		
		# loop through a reversed version
		for name in names.reversed
			assert name.length == 3
		# again the original list is unchanged
		assert names == ['foo', 'bar', 'baz']
		
		# get an index with each element
		order = []
		for i, name in names.numbered
			branch i
				on 0, assert name == 'foo'
				on 1, assert name == 'bar'
				on 2, assert name == 'baz'
			order.add(i)
		assert order == [0, 1, 2]
		
		# get an index with each element, but in reverse
		order = []
		for i, name in names.numberedDown
			branch i
				on 0, assert name == 'foo'
				on 1, assert name == 'bar'
				on 2, assert name == 'baz'
			order.add(i)
		assert order == [2, 1, 0]
	
	def literals
		# you've seen these above
		ints = [1, 2, 3]
		for i in ints, assert i > 0
		
		names = ['foo', 'bar', 'baz']
		for name in names, assert name.length == 3
		
		# list literals can span lines
		names = [
			'foo',
			'bar',
			'baz',  # trailing comma is optional
		]
		
		# lists can be nested
		pairs = [
			[0, 0],
			[-2, -3],
			[5, 2],
		]
		for pair in pairs
			assert pair.count == 2
		for x, y in pairs
			assert x > -10 and y > -10

		# lists can have other types of collections in them
		sites = [
			{'name': 'Cobra', 'url': 'http://cobra-language.com/'},
			{'name': 'Wikipedia', 'url': 'http://en.wikipedia.org/'},
		]
		for dict in sites
			assert dict.count == 2
			assert dict['url'].startsWith('http://')
		
		# lists can have object instantiations in them
		points = [Point(0, 0), Point(1, 1), Point(0, 1), Point(1, 0)]
		assert points[0].toString == 'Point(0, 0)'
		
		# lists can be heterogenous
		stuff = ['foo', 5, nil]
		assert stuff.reversed == [nil, 5, 'foo']

		# the inferred type for a list is as narrow as possible
		ints = [1, 2, 3]               # List<of int>
		names = ['foo', 'bar', 'baz']  # List<of String>
		sites = [{'a': 'b'}]           # List<of Dictionary<of String, String>>
		points = [Point(0, 0)]         # List<of Point>
		stuff = ['foo', 5, nil]        # List<of dynamic?>
		stuff = []    # an empty list is List<of dynamic?>
	
	def other
		ints = [1, 2, 3]
		# .reversed returns a new list with the reversed elements
		# with no change to the original list
		assert ints.reversed == [3, 2, 1]
		assert ints == [1, 2, 3]
		
		for i in ints
			assert i > 0

	def printingAndStringConversion
		ints = [1, 2, 3]
		
		# list to string is ugly in .NET
		assert ints.toString == r'System.Collections.Generic.List`1[System.Int32]'
		# cobra also provides
		assert ints.toPrintString == r'[1, 2, 3]'

		# string substitution
		assert 'the ints are [ints]' == r'the ints are [1, 2, 3]'
		
		# print
		print ints  # prints: [1, 2, 3]
		
		# print each element
		for i in ints
			print i
		for index, i in ints.numbered
			print '[index]. [i]'
		
		# trace
		trace ints  # trace: ints=List<of int>[1, 2, 3]; at x-how-to-list.cobra:163;
		            #        in HowToUseLists.printingAndStringConversion

		# joining list elements into a string
		assert ints.join(' ') == '1 2 3'
		assert ints.join('---') == '1---2---3'
		assert ints.join(', ', ' and ') == '1, 2 and 3'


class Point

	cue init(x as int, y as int)
		base.init
		_x, _y = x, y
	
	get x from var as int
	
	get y from var as int
	
	def toString as String is override
		return '[.typeOf.name]([.x], [.y])'



		# TODO:

		# slicing
		
		# customers.sort(ref .orderByTotalSpent) 
		# sort with do
		
		# use numeric for loop because you're going to modify a list
		
		# .add, .addRange
		
		# concat two lists with +
		
		# in operator
		
		# printing / string conversion
		# all
		# any
		# declaring types
		# List vs. IList
		# for expression returns a list
		# all extension methods
		# check msdn docs on IList and List
		# any enumerable .toList
		
		# subclass the list type
