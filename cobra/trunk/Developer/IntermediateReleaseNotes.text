Post 0.8

* Add support for specifying unsigned integers as Hex literals
    e.g. 0x7f  0x7f_8   0x7Fu16  0x7F_u32
    
* Added generic methods.

* Added new Visitor class to the Cobra standard library. Subclasses can easily implement the visitor pattern and the classes being visited require no additional modification. See the doc string of `Visitor` in CobraLang.cobra for details.

* Cobra now prints '[1, 2, 3]' for a list of integers rather than 'System.Collections.Generic.List`1[System.Int32]'. It still uses the standard List<of> class.

Added new Cobra library classes StringMaker (abstract), PrintStringMaker and TechStringMaker and associated properties CobraCore.printStringMaker and CobraCore.techStringMaker. Through those properties, you can customize the output of `print` statements and string substitution (.printStringMaker), and assert failures and `trace` statements (.techStringMaker).

For convenience, the extension methods .toPrintString and .toTechString have been added to System.Object.

* You can now say `get foo from var is override`. In other words, you can add "is names" after a "from var" property declaration.

* The backend C# compiler is now invoked via .NET's CSharpCodeProvider (also tested on Mono). This eliminates problems with locating the installed C# compiler and speeds up the regression tests. You can still use the -sharp-compiler option to dictate the backend C# compiler if you desire.

* The Cobra run-time will no longer throw IndexOutOfRangeException for slicing. At worst, you will get an empty list. This is more convenient and matches Python's semantics. Thanks to "hopscc" in New Zealand.

* There are three places where non-nil is verified at run-time: class variables at the end of an initializer, arguments at the beginning of a method and "to !" casts. Added new -include-nil-checks:yes|no option which includes or excludes these checks. Default is 'yes'. Using -turbo will set to 'no'.

* Renamed CobraCore.willCheckNonNilClassVars to CobraCore.willCheckNil

* Integer literals can now be suffixed to indicate their type such as `1_u64` and `7_i8`. The underscore is optional and valid sizes include 8, 16, 32 and 64. There is no reason to ever suffix zero (0). Credit: hopscc

* In string literals, square brackets can be escaped with a backslash to prevent expression substitution. ticket:15

* (minor) Fix BinaryOp.writeSharpBreakdownItems to indent and outdent around its subexpressions.

* Fixed: Using "continue" in new style numeric for loops does not increment the loop variable. ticket:9

* Fixed: Cannot access classes that start with a lower case letter such as iDB2Connection. ticket:16

* Fixed: Looping through an object that inherits IEnumerator<of T>, but with T that has constraints, does not recognize those constraints in the body of the `for` loop. For example, if T is constrained to be an ICar, the .drive method cannot be invoked.

* Fixed: Cannot assign or compare qualified types such as `System.Object` even though the same can be done with unqualified types such as `Object`.

* Fixed: Cannot implement a method whose signature is matched by an extension method of a base class.

* Fixed: Method return types from generics in DLLs are always considered nilable even if the generic parameter was not (such as `bool`).
