Post 0.7.4

Some of the bugs fixed is this release are in support of using the GTK# and Tao.SDL libraries.

Added extensions for classes, structs and interfaces. These work even on .NET 2.0.

Added bitwise operators & | ^ << >> ~ and their augmented assignment versions &= |= ^= <<= >>=

Added `uint` type and reserved word. Like the `int` type, the size defaults to 32 bits, but in this case it is unsigned.

Added ISet<of T> and Set<of T> to the Cobra standard library. Sets are unordered collections of arguments with fast membership testing (either 'someSet.contains(element)' or 'element in someSet').

Added set literals like {1, 2, 3} and {,}.
As with lists, sets can now be equal if their contents are equal (even if their generic type arg is different).
Changed empty dict literal to {:}. {} still works but with a warning.

Added new for loop syntax for numeric for loop. The old syntax will still be supported for one year, but its use of .. ++ and -- didn't match anything else in the language. The new syntax uses the same "for x in" as an "enumerable for loop" and the rest of the statement matches slicing (list[start:stop:step]):
.code
	# forms:
	for x in start : stop : step
		print x
	for x in start : stop  # step of 1 is assumed
		print x
	for x in stop  # start of 0 is assumed
		print x

	# examples:
	list = ['qwerty', 'dvorak']
	for i in list.count
		print list[i]
	for i in 0 : 100 : 2
		print i

Unlike the old numeric for loop, the parameters to the loop are evaluated only once. In other words, the `stop` and the `step` are not re-evaluated each iteration of the loop. If you need that kind of behavior, use the general purpose `while` loop.

Added float32 and float64 types. The existing `float` type is an alias for `float64`. Also, fractional literals can be suffixed with `_f32` or `_f64` to indicate type. The underscores are optional and the `_f` suffix is still available for `float`.
You can write `50f` now instead of having to include the decimal portion as in `50.0f`.

Enable the previously reserved keyword `number` as a primitive type which aliases to `decimal`. Added -number:foo option where choices are the same as the fractional types in the language: float32, float64, float and decimal. The option sets the type for `number` and also for unsuffixed fractional literals such as `3.5`.

Added -sharp-compiler option.
Check for the Mono+Windows case prior to checking the well known paths for C# compilers (otherwise the .NET compiler may still be found first even when running on Mono).

-include-asserts[:no|yes]  default is yes
    Include assert statements in the program.

-pkg:NAME
    References package via "pkg-config --libs". (Mono only.)

-turbo[:no|yes]
    Maximum run-time performance. This is a convenience for -contracts:none -include-asserts:no -include-tests:no -optimize


Relaxed the restriction that class level variables (also called "fields" in .NET) start with an underscore.

If a local name is unknown, give a list of similar member names that the programmer may have been trying to refer to.

In further assistance to Python programmers, there is a new warning when `def __init__` in encountered:
Initializers are named "init" with no surrounding underscores.

The `for` expression can now work on anything enumerable, not just lists and arrays.

Added a warning for duplicate modifiers such as a method marked "shared" inside a "shared" block. Formerly, this would cause a compilation error.

Improved error message for incompatibly arguments when the only incompatibility was non-nilable vs. nilable.
Argument 1 of method "bar" expects a non-nilable type (A), but the call is supplying a nilable type (B?).

* Fixed: The declaration `var _t as List<of int>= List<of int>()` gives a false compliation error due to the `>=`.

* Fixed: Invoking a method with args that has MustUseResultAttribute, but whose result is not being used, causes an internal exception instead of a warning.

* Fixed: Putting `ref` in front a variable causes an internal exception instead of a normal error message.

* Fixed: Cyclical inheritance causes a stack overflow in the compiler instead of a normal error message.

* Fixed: Using descendants of a common base class in the expression `if(cond, a, b)` causes a false compilation error rather than inferring the common base class as the type of the `if` expression.

* Fixed: "cobra -exception-report -detailed-stack-trace foo.cobra" (also, "cobra -er -dst foo.cobra") gives an error if _any_ method in the program uses the "yield" statement.

* Fixed: Calling `Application.init` in a GTK application causes a false compilation error.

* Fixed: Using the less-than operator after a typecast causes a false compilation error.

* Fixed: Simply using a namespace with its own Object class (such as Gtk) causes false compilation error messages in unexpected places.

* Fixed: Cannot use the "enum call/combine" syntax with qualified enums such as `SomeNameSpace.SomeEnum(MemberA, MemberB)`.

* Fixed: Using descendants of a common base class in the expression `if(cond, a, b)` causes a false compilation error rather than inferring the common base class as the type if the `if` expression.

* Fixed: Accessing a local variable, such as `x`, outside of a code block such as an invariant condition list or class var initialization, causes an internal error rather than a normal error message.

* Fixed: Cobra erroneously recognizes shared/static events in DLLs as being instance.

* Fixed: While Cobra offers suggestions for unknown identifiers and dotted calls that have similar member names, it does not do so for *calls* on identifiers.

* Fixed: Referring to read/write fields in a DLL gives a false compliation error that the field does not exist.

* Fixed: Referring to a nested class type causes false compilation errors.

* Fixed: Accessing qualified class names under some circumstances gives false compilation errors.

* Fixed: Compilation gives false errors for some method names found in DLLs.

* Fixed: The -lib option doesn't work with filenames with spaces.

* Fixed: Cannot refer to a type with the same name as its containing class without getting false compilation errorsz.

* Fixed: References to System.Configuration.* are ignored by Cobra.

* Fixed: Using the `inherits` operator with a generic parameter causes an internal error.

* Fixed: Integer literals like 0 and 1 cannot be assigned to valid integer types like `uint16` without casting.

* Fixed: An if-statement with an expression such as `.foo` that has no return type produces an internal error instead of a normal error message.

* Fixed: A stray space on a blank line triggers a false error message about indentation.

* Fixed: The "cobra -test" command chokes on generic classes.

* Fixed: Cannot read non-CLS compliant DLL-based classes that have members differing only by case. Note: Cobra will read these now but only "sees" the first one it encounters. Libraries with this problem will also cause problems with Visual Basic which is fully case-insensitive.

----

Probably not included in final release notes either because these popped up during development or weren't noticeable in the last version:

Fixed: Cannot pass a list to Set<of T>() with duplicate elements. Get a run-time exception.
Fixed: The expression "<item> in <set>" performs slowly (linear search).
Fixed: Cobra no longer thinks that all methods with arguments in a DLL have variable number of arguments.
