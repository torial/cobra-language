# Properties implicitly create and init backing variable
class PropInit

	var _x as int
	var _y = 99
	var _y1 = 99
	
	# existing backing var
	get x from var = 90 
	get y1 from var as int8  # type is redundant as set in backing var so ignored
	
	# implicitly generate and init backing var
	get z0 from var as int
	get z from var as int = 100  # explicitly set type and init
	get z1 from var as int is protected # explicitly set type and modifier
	get z2 from var as int is protected = 101  # type, mod + init expr
	get z3 from var = 103  # infer type fm init expr

	def main is shared
		x = PropInit()
		assert x.x == 90
		assert x.y1 == 99
		
		assert x.z0 == 0
		
		assert x.z == 100	
		assert x.z1 == 0 # not initted
		assert x.z2 == 101
		assert x.z3 == 103
