"""
The code in this file should not .throwError, record warnings, etc.
All of that happens during .bindFoo phases.
"""


##
## Compiler
##

class Compiler is partial

	def computeOutNameObjc as String
		outName =''
		if .options.boolValue('test')
			outName = _modules.last.fileName
		else if .options.containsKey('out')
			outName = .options.getDefault('out', '')
		if outName == '', outName = .defaultOutName to !
		if outName.endsWith('.objc') or outName.endsWith('.OBJC'), outName = outName[:-5]
		if outName.endsWith('.cobra') or outName.endsWith('.COBRA'), outName = outName[:-6]
		_baseExeFileName = outName
		# outName = Utils.forceExtension(outName, '....')  # No extension for ObjC on Mac & Linux
		_fullExeFileName = outName
		return outName
		
	def writeObjc
		Node.setCompiler(this)
		try
			pass
			_moduleFileName_to_curlyToCobraLineNum = Dictionary<of String, Dictionary<of int, int>>()
			for _curModule in _modules
				if not _curModule.fileName.endsWith('SystemInterfaces.cobra')
					javaToCobraLineNum = _curModule.writeJavaDef
					_moduleFileName_to_curlyToCobraLineNum[_curModule.fileName] = javaToCobraLineNum
					_moduleFileName_to_curlyToCobraLineNum[Path.getFullPath(_curModule.fileName)] = javaToCobraLineNum
		finally
			Node.setCompiler(nil)

	def writeObjcTestInvocation
		# TODO
		pass

	def compileObjc
		.compileObjc('')

	def compileObjc(extraJavacOptions as String)
		require
			.modules.count
		body
			if .verbosity >= 2, print 'Compiling generated code'
			# options = .options
			print 'Not compiling objc code yet.'
