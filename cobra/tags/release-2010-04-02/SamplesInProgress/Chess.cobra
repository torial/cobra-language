"""

TODO

	[ ] Castling
	[ ] Promote pawn
	[ ] Enpassant
	[ ] Gothic chess
	[ ] Different board game, like Pente: http://www.boardgamegeek.com/game/1295
	
COBRA TODO

* if(_piece,_piece,"") should work, but C# complains:
  Type of conditional expression cannot be determined because there is no implicit conversion between `Cell._piece' and `string'.

* _piece ? "" also complains, although it should work with the expression type being Object

* Methods on constructed types expect "T" instead of the actual type.

* yield return statement

"""

class Program

	def main is shared
		board = Board.makeJuniorBoard
		white = ComputerPlayer(Color.white)
		black = ComputerPlayer(Color.black)
		g = Game(board, white, black)
		g.print
		

class Game

	var _board as Board
	var _white as Player
	var _black as Player
	var _whoseTurn as Player
	var _moves as List<of Move>
	
	def init(board as Board, white as Player, black as Player)
		require
			white.color == Color.white
			black.color == Color.black
		body
			_board = board
			_white = white
			_black = black
			white.game = this
			black.game = this
			_whoseTurn = white
			_moves = List<of Move>()
		
	pro board as Board
		get
			return _board
		set
			require .board is nil
			_board = value
	
	pro white as Player
		get
			return _white
		set
			require .white is nil
			_white = value
		
	pro black as Player
		get
			return _black
		set
			require .black is nil
			_black = value
	
	get whoseTurn from var
	
	def print
		whiteTurn = if(_whoseTurn is _white, '> ', '  ')
		blackTurn = if(_whoseTurn is _black, '> ', '  ')
		print
		print 'Game - move [_moves.count+1]'
		print '  Board:'
		.board.print
		print '  Players:'
		print '    [whiteTurn][.white]'
		print '    [blackTurn][.black]'
		
	def playOneMove
		_whoseTurn.playOneMove
		_whoseTurn = if(_whoseTurn is _white, _black, _white)

			
class Move

	pass
	
	
class Board
	implements IEnumerable<of Cell>
	
	var _numCols as int
	var _numRows as int
	var _rows as List<of List<of Cell>>
	
	shared

		def makeJuniorBoard as Board
			numRows = 6
			numCols = 4
			maxRow = numRows - 1
			maxCol = numCols - 1
			b = Board(numRows, numCols)
			for col = 0 .. numCols
				b.setCell(Pawn(Color.black), 1, col)
				b.setCell(Pawn(Color.white), numRows-2, col)
			b.setCell(Rook(Color.black), 0, 0)
			b.setCell(Rook(Color.black), 0, maxCol)
			b.setCell(Rook(Color.white), maxRow, 0)
			b.setCell(Rook(Color.white), maxRow, maxCol)
			b.setCell(Bishop(Color.black), 0, 1)
			b.setCell(King(Color.black), 0, 2)
			b.setCell(Bishop(Color.white), maxRow, 1)
			b.setCell(King(Color.white), maxRow, 2)
			return b
			
	def init(numRows as int, numCols as int)
		require
			numCols >= 2
			numRows >= 2
		body
			_numRows = numRows
			_numCols = numCols
			_rows = List<of List<of Cell>>(numRows)
			for rowNum = 0 .. numRows
				row = List<of Cell>(numCols)
				_rows.add(row)
				for colNum = 0 .. numCols
					row.add(Cell(rowNum, colNum, numRows-rowNum))
	
	def setCell(piece as Piece, row as int, col as int)
		cell = _rows[row][col]
		cell.piece = piece
		piece.cell = cell

	get [rowIndex as int] as List<of Cell>
		return _rows[rowIndex]
		
    def getEnumerator as IEnumerator<of Cell>
        return BoardEnumerator(this)
		#CC:
		#for row in _rows
		#	for cell in row
		#		yield return cell

    def getEnumerator as System.Collections.IEnumerator
        implements System.Collections.IEnumerable
		return .getEnumerator to System.Collections.IEnumerator
	
	def print
		for row in _rows
			for cell in row
				cell.dump
			print


class BoardEnumerator
	implements IEnumerator<of Cell>
	# TODO: would be nicer to use 'yield return' in Board.getEnumerator and then axe this class
	
	var _board as Board
	var _rowIndex as int
	var _colIndex as int
	var _numRows as int
	var _numCols as int
	
	def init(board as Board)
		_board = board
		_colIndex = -1
	
	get current as Cell
		return _board[_rowIndex][_colIndex]

	get current as Object
		implements System.Collections.IEnumerator
		return _board[_rowIndex][_colIndex]
		
	def moveNext as bool
		if _rowIndex >= _numRows
			return false
		_colIndex += 1
		if _colIndex == _numCols
			_colIndex = 0
			_rowIndex += 1
			if _rowIndex == _numRows
				return false
		return true
	
	def reset
		_rowIndex = 0
		_colIndex = -1
		
	def dispose
		pass
	
	

class Player
	
	var _game as Game?
	var _board as Board?
	var _color as Color
	var _pieces as List<of Piece>
	
	def init(color as Color)
		_color = color
		_pieces = List<of Piece>()
		
	pro game as Game?
		get
			return _game
		set
			require
				value
				.game is nil
			body
				_game = value
				_board = _game.board
				for cell in _board
					p = cell.piece
					if p and p.color == _color
						_pieces.add(p to passthrough)  # CC: axe cast
						
	get board from var
	
	get color from var
	
	def playOneMove
		throw Exception('override playOneMove')
		
		
class ComputerPlayer
	inherits Player

	def init(color as Color)
		base.init(color)

	def toString as String is override
		return '[.getType.name]([.color])'

	def playOneMove is override
		pass
		

class HumanPlayer
	inherits Player
	
	def init(color as Color)
		base.init(color)
	
	
enum Color
	black
	white


class Cell

	var _rowNum as int
	var _colNum as int
	var _displayRow as int
	var _piece as Piece?
	
	def init(rowNum as int, colNum as int, displayRow as int)
		_rowNum = rowNum
		_colNum = colNum
		_displayRow = displayRow
	
	pro piece from var
	
	get displayCoordinates as String
		col = (_colNum + c'a' to int) to char
		return '[col][_displayRow]'
		
	def dump
		s = '  | ([_rowNum],[_colNum]) [.displayCoordinates]  [if(_piece,_piece.toString,"")]'
		s = s.padRight(27)
		print s stop
		

class Piece

	var _cell as Cell?
	var _color as Color
	
	def init(color as Color)
		_color = color
	
	get color from var
	
	pro cell from var
	
	def toString as String is override
		return '[.getType.name]-[.color]'
		
		
class Pawn
	inherits Piece
	
	def init(color as Color)
		base.init(color)
		
		
class Rook
	inherits Piece
	
	def init(color as Color)
		base.init(color)


class Bishop
	inherits Piece
	
	def init(color as Color)
		base.init(color)
		
	
class King
	inherits Piece
	
	def init(color as Color)
		base.init(color)
		