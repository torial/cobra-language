# .compile-only.

class Values
	inherits Dictionary<of String, dynamic>
	
	cue init(values as Dictionary<of String, dynamic>)
		base.init
		for key in values.keys
			this[key] = values[key]


interface IProcessor

	def process(i as int)


class Processors<of T>
	where T must be IProcessor
	implements IEnumerable<of T>  # inherit using a generic parameter

	var _procs as List<of IProcessor>

	def process
		for proc in this  # former bug: for loop does not respect generic parameter constraints
			proc.process(1)

	def getEnumerator as IEnumerator<of T>
		return nil to passthrough

	def getEnumerator as System.Collections.IEnumerator
		implements System.Collections.IEnumerable
		return .getEnumerator


class Program

	def main is shared
		pass
