# Simple Test for implicit line continuation in method call arglists  and 
# method param declarations
# if this fails it probably wont compile
namespace Test
	class SpaceAgnostic
	
		def main is shared
			CobraCore.tracer.isActive = false
			.foo('foo argument Number 1',
				'arg2',
				'areg3' )
				
			.foo2('foo2 argument Number 1',
					'argument Number 2',
					'argument Number THree reg3' )
				
			.foo3('foo3 argument Number 1',
						'argument Number 2', 
						'argument Number THree reg3' )

			.foo4('foo4 argument Number 1',	
			'argument Number 2', 
			'argument Number THree reg3' )

			.foo5('foo5 argument Number 1',	
		'argument Number 2', 
			'argument Number THree reg3' )
			
			.foo6('foo6 argument Number 1',	
					'argument Number 2', 
				'argument Number THree reg3' )
			
			.foo7('foo7 argument Number 1',	
						'argument Number 2', 
			'argument Number THree reg3' )
			# thats it for calls
		
		def foo(arg1 as String, arg2 as String, arg3 as String) is shared
			assert arg1.length
			#print 'foo done'
			
		def foo2(arg1 as String, 
				arg2 as String, 
				arg3 as String	) is shared
			assert arg1.length
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo2 done'
		
		def foo2a(arg1 as String, 
					arg2 as String, 
					arg3 as String	) is shared
			assert arg1.length
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo2a done'
			
		def foo3(arg1 as String, 
			arg2 as String, 
			arg3 as String	) is shared
			assert arg1.length
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo3 done'
		
		# pathological (0)
		def foo4(arg1 as String, 
		arg2 as String, 
		arg3 as String	) is shared
			assert arg1.length
			#print "in foo4"
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo4 done'
		
		# pathological (+1)
		def foo5(arg1 as String, 
	arg2 as String, 
	arg3 as String	) is shared
			#print "in foo5"
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo5 done'
		
		# pathological (++1)
		def foo6(arg1 as String, 
arg2 as String, 
arg3 as String	) is shared
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo6 done'
		
		def foo7(arg1 as String, 
						arg2 as String, 
						arg3 as String	) is shared
			trace arg1
			assert arg1.length
			trace arg2
			assert arg2.length
			trace arg3
			assert arg3.length
			#print 'foo7 done'
			
	class AbX 
		is abstract	

		def aa(arg1 as String) is abstract
			
		def ab(arg1 as String,	
					arg2 as String) is abstract
		def ac(arg1 as String,
			arg2 as String) is abstract
			
		def ad(arg1 as String,
		arg2 as String) is abstract
	
		def ad1(arg1 as String,
	arg2 as String) is abstract
		
		def ae(arg1 as String,
			arg2 as String) is abstract
