class Indexer
	inherits ProperDexer

	var _params as List<of Param>

	# TODO: add implements support. constructor param will be:
	# implementsList as List<of INode>,

	def init(token as IToken, box as Box, name as String, paramsList as List<of Param>, isNames as List<of String>, coverVar as BoxVar, coverAccess as String, docString as String)
		base.init(token, box, name, isNames, docString)
		_params = paramsList
		_coverVar = coverVar
		_coverAccess = coverAccess
		_isNames = isNames
		.defaultToVirtual

	def init(token as IToken, box as Box, name as String, paramsList as List<of Param>, returnTypeOrNode as INode, isNames as List<of String>, docString as String)
		base.init(token, box, name, returnTypeOrNode, isNames, docString)
		_params = paramsList

	get params as List<of Param> is override
		return _params

	get isCallable as bool is override
		return false

	get englishName as String is override
		return 'indexer'

	def _bindInt
		base._bindInt
		for param in .params
			param.bindInt

	def makeGetPart(token as IToken) as AbstractMethod is override
		_getPart = IndexerGetter(token, this)
		return _getPart to !

	def makeSetPart(token as IToken) as AbstractMethod is override
		_setPart = IndexerSetter(token, this)
		return _setPart to !

	def constructedFor(box as Box, gpToType as Dictionary<of GenericParam, IType>) as BoxMember  # CC: as same
		newMember = base.constructedFor(box, gpToType) to Indexer  # CC: this = base. ...
		newMember._params = List<of Param>(for p in _params get p.constructedFor(box, gpToType)) # CC: get rid of list instantiation
		return newMember

	get sharpNotNullPrefix as String is override
		return ''

	def writeSharpDef(sw as SharpWriter)
		base.writeSharpDef(sw)
		assert _name==r'[]'
		sw.writeLine('')
		.writeSharpNotNull(sw)
		.writeSharpIsNames(sw)
		sw.write(' [_returnType.sharpRef] this')
		.writeSharpParams(sw, r'[]')
		.writeSharpBody(sw)
		getPart = .getPart
		if getPart
			.compiler.codeMemberStack.push(getPart)
			try
				if getPart.requirePart
					getPart.requirePart.writeSharpMethod(sw)
				if getPart.ensurePart
					getPart.ensurePart.writeSharpMethod(sw)
			finally
				.compiler.codeMemberStack.pop
		setPart = .setPart
		if setPart
			.compiler.codeMemberStack.push(setPart)
			try
				if setPart.requirePart
					setPart.requirePart.writeSharpMethod(sw)
				if setPart.ensurePart
					setPart.ensurePart.writeSharpMethod(sw)
			finally
				.compiler.codeMemberStack.pop
		if .compiler.includeTests
			.writeSharpTest(sw)


class IndexerGetter
	inherits ProperDexerXetter

	def init(token as IToken, indexer as Indexer)
		base.init(token, indexer, List<of String>())  # TODO: take in docString

	get englishName as String is override
		return 'indexer getter'

	get xetPartName as String is override
		return 'get'

	def _bindInt
		_returnType = .parent.returnType  # must be before base
		base._bindInt
		assert _returnType
		for param in .parent.params
			_params.add(param)


class IndexerSetter
	inherits ProperDexerXetter

	def init(token as IToken, indexer as Indexer)
		base.init(token, indexer, List<of String>())  # TODO: take in docString

		# make a token for the Param()
		t = token.copy
		t.which = 'ID'
		t.text = 'value'
		t.value = 'value'

		if indexer.returnType
			p = Param(t, indexer.returnType, true)
		else if indexer.returnTypeNode
			p = Param(t, indexer.returnTypeNode, true)
		else
			throw FallThroughException(indexer)
		_params.add(p)

	get englishName as String is override
		return 'indexer setter'

	get xetPartName as String is override
		return 'set'

	def _bindInt
		base._bindInt
		_returnType = .compiler.voidType
		assert _returnType
		for param in .parent.params
			_params.add(param)
