class SharpWriter
	inherits IndentedWriter

	var _cobraLineNum as int
	var _sharpLineNum as int
	var _sharpToCobraLineNum as Dictionary<of int, int>
	var _needToOutputCobraLineNum as bool

	def init(tw as TextWriter)
		base.init(tw)
		_cobraLineNum = 1
		_sharpLineNum = 1
		_sharpToCobraLineNum = {1 : 1}

	get sharpToCobraLineNum from var

	def node(node as SyntaxNode)
		"""
		As C# code is generated, each of the nodes should invoke this method so that the
		SharpWriter can map C# line numbers back to Cobra source line numbers.
		"""
		lineNum = node.token.lineNum
		if lineNum>0
			# assert lineNum >= _cobraLineNum, '[lineNum], [_cobraLineNum]'
			# ^ Can't assert that because of post while statements.
			_cobraLineNum = lineNum
			_needToOutputCobraLineNum = true

	def write(value as char) is override
		if _needToOutputCobraLineNum and (value==_innerWriter.newLine or value==.newLine2)
			_innerWriter.write('  // [_cobraLineNum]')
			_needToOutputCobraLineNum = false
		base.write(value)
		if _lastChar==_innerWriter.newLine or _lastChar==.newLine2
			_sharpToCobraLineNum[_sharpLineNum] = _cobraLineNum
			_sharpLineNum += 1

	# CC: shouldn't need the following
	def write(value as String) is override
		base.write(value)
