class AttributeList
	inherits List<of AttributeDecl>
	
	def init
		pass


class AttributeDecl
	inherits NamedNode

	var _expr as CallExpr

	def init(expr as Expr)
		require expr inherits IdentifierExpr or expr inherits CallExpr
		base.init(expr.token)
		# normalizing to CallExpr makes the rest of the implementation easier
		if expr inherits IdentifierExpr
			expr = CallExpr(expr.token, expr.name, List<of Expr>())
		_expr = expr to CallExpr
		_expr.isForAttribute = true

	get expr from var

	get name as String is override
		return _expr.name

	def _bindInt
		base._bindInt
		_expr.bindInt

	def _bindImp
		base._bindImp
		# support using 'Foo' when the real attribute class name is 'FooAttribute'
		name = _expr.name
		if not name.endsWith('Attribute') and .compiler.canNameBeUndottedMember(name) and not .compiler.symbolForName(name, true, false)
			if .compiler.symbolForName(name+'Attribute', true, false)
				_expr = CallExpr(_expr.token, name+'Attribute', _expr.args)
				_expr.isForAttribute = true
		_expr.bindImp
		# TODO: check that the properties exist when using x=...

	get typeForIdentifier as IType is override
		throw ShouldNotCallException(.getType)

	get typeForReceiver as IType is override
		throw ShouldNotCallException(.getType)

	def writeSharpDef(sw as SharpWriter) is override
		.writeSharpDef(sw, '')

	def writeSharpDef(sw as SharpWriter, prefix as String)
		sw.write(r'[')
		sw.write(prefix)
		expr = _expr
		sw.write('[expr.name]')
		if expr.args.count
			sw.write('(')
			sep = ''
			for arg in expr.args
				sw.write(sep)
				if arg inherits AssignExpr
					sw.write(Utils.capped((arg.left to dynamic).name))
					sw.write('=')
					arg = arg.right
				assert not arg inherits AssignExpr
				arg.writeSharpDefInContext(sw)
				sep = ', '
			sw.write(')')
		sw.writeLine(r']')


class AssemblyDecl
	inherits NamedNode
	implements INameSpaceMember
	"""
	The only purpose of an assembly declaration is to hold assembly level attributes.
	"""
	
	var _parentNameSpace as NameSpace?
	var _attribs as AttributeList

	def init(token as IToken, attribs as AttributeList)
		base.init(token)
		_attribs = attribs

	get attributes from _attribs

	get englishName as String
		return 'assembly'

	get typeForIdentifier as IType? is override
		assert false
		return nil
	
	get typeForReceiver as IType? is override
		assert false
		return nil

	pro parentNameSpace from var
	
	def writeSharpDef(sw as SharpWriter) is override
		base.writeSharpDef(sw)
		for attrib in _attribs
			attrib.writeSharpDef(sw, 'assembly: ')

	def bindInh
		pass

	def _bindInt
		base._bindInt
		for attrib in _attribs
			try
				attrib.bindInt
			catch ne as NodeException
				.compiler.recordError(ne)

	def _bindImp
		base._bindImp
		for attrib in _attribs
			try
				attrib.bindImp
			catch ne as NodeException
				.compiler.recordError(ne)
	
	# TODO: shouldn't need these, but INameSpaceMember forces it on us (mostly/entirely through inheriting IMember)
	
	def unNilReturnType
		pass
	
	def writeSharpTestInvocation(sw as SharpWriter)
		pass
	
	get isCallable as bool
		return false
	
	get isShared as bool
		return false

	get requiresThis as bool
		return false
		
	get resultType as IType?
		return nil
