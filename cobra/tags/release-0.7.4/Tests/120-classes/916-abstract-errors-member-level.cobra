# .skip.

* error if a subclass method that overrides an abstract method changes visibility (public, protected, etc.)
* error if making a concrete property but not matching its canRead and canWrite

class CA
	#  error if marking a property or method abstract and the class is not

	def foo is abstract  # .error. must be

	pro prop1 as int is abstract  # .error. must be
		get
		set

	get prop2 as int is abstract  # .error. must be
	
	set prop3 as int is abstract  # .error. must be


class CB
	is abstract
	# error if marking a non-method or property (no constructor or class var)

	var _x as int is abstract  # .error. cannot

	def init is abstract  # .error. cannot
		pass


class CC
	is abstract
	# error if "abstract" on a member that is a new, override, virtual or shared

	def one is new, abstract

	def two is override, abstract

	def three is virtual, abstract
	
	def four is shared, abstract


class CD
	is abstract
	# error if body for an abstract member

	def foo is abstract
		print 'I can has cheezburger?'  # .error. cannot


class CE1
	is abstract
	# error if no "override" or "abstract" in a subclass method of the same sig


class CE2
	inherits CE1



 @@ two more at top
